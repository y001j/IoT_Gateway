{"version":3,"file":"alertService-D3M29e-e.js","sources":["../../../src/services/alertService.ts"],"sourcesContent":["import api from './api';\nimport type {\n  Alert,\n  AlertCreateRequest,\n  AlertUpdateRequest,\n  AlertListRequest,\n  AlertListResponse,\n  AlertResponse,\n  AlertStats,\n  AlertStatsResponse,\n  AlertRule,\n  AlertRuleCreateRequest,\n  AlertRuleUpdateRequest,\n  AlertRuleListResponse,\n  AlertRuleResponse,\n  AlertRuleTestResponse,\n  NotificationChannel,\n  NotificationChannelCreateRequest,\n  NotificationChannelUpdateRequest,\n  NotificationChannelListResponse,\n  NotificationChannelResponse,\n} from '../types/alert';\n\nclass AlertService {\n  private readonly baseUrl = '/api/v1/alerts';\n\n  // Alert management\n  async getAlerts(params: AlertListRequest): Promise<{ alerts: Alert[]; total: number; page: number; pageSize: number }> {\n    const searchParams = new URLSearchParams({\n      page: params.page.toString(),\n      page_size: params.pageSize.toString(),\n    });\n\n    if (params.level) searchParams.append('level', params.level);\n    if (params.status) searchParams.append('status', params.status);\n    if (params.source) searchParams.append('source', params.source);\n    if (params.search) searchParams.append('search', params.search);\n    if (params.startTime) searchParams.append('start_time', params.startTime.toISOString());\n    if (params.endTime) searchParams.append('end_time', params.endTime.toISOString());\n\n    const response = await api.get<AlertListResponse>(`${this.baseUrl}?${searchParams}`);\n    return response.data.data;\n  }\n\n  async getAlert(id: string): Promise<Alert> {\n    const response = await api.get<AlertResponse>(`${this.baseUrl}/${id}`);\n    return response.data.data;\n  }\n\n  async createAlert(data: AlertCreateRequest): Promise<Alert> {\n    const response = await api.post<AlertResponse>(this.baseUrl, data);\n    return response.data.data;\n  }\n\n  async updateAlert(id: string, data: AlertUpdateRequest): Promise<Alert> {\n    const response = await api.put<AlertResponse>(`${this.baseUrl}/${id}`, data);\n    return response.data.data;\n  }\n\n  async deleteAlert(id: string): Promise<void> {\n    await api.delete(`${this.baseUrl}/${id}`);\n  }\n\n  async acknowledgeAlert(id: string, comment?: string): Promise<void> {\n    await api.post(`${this.baseUrl}/${id}/acknowledge`, { comment });\n  }\n\n  async resolveAlert(id: string, comment?: string): Promise<void> {\n    await api.post(`${this.baseUrl}/${id}/resolve`, { comment });\n  }\n\n  async getAlertStats(): Promise<AlertStats> {\n    const response = await api.get<AlertStatsResponse>(`${this.baseUrl}/stats`);\n    return response.data.data;\n  }\n\n  // Alert Rules management\n  async getAlertRules(): Promise<AlertRule[]> {\n    const response = await api.get<AlertRuleListResponse>(`${this.baseUrl}/rules`);\n    return response.data.data;\n  }\n\n  async createAlertRule(data: AlertRuleCreateRequest): Promise<AlertRule> {\n    const response = await api.post<AlertRuleResponse>(`${this.baseUrl}/rules`, data);\n    return response.data.data;\n  }\n\n  async updateAlertRule(id: string, data: AlertRuleUpdateRequest): Promise<AlertRule> {\n    const response = await api.put<AlertRuleResponse>(`${this.baseUrl}/rules/${id}`, data);\n    return response.data.data;\n  }\n\n  async deleteAlertRule(id: string): Promise<void> {\n    await api.delete(`${this.baseUrl}/rules/${id}`);\n  }\n\n  async testAlertRule(id: string, testData: Record<string, any>): Promise<{ ruleId: string; triggered: boolean; message: string; testedAt: Date }> {\n    const response = await api.post<AlertRuleTestResponse>(`${this.baseUrl}/rules/${id}/test`, { data: testData });\n    return response.data.data;\n  }\n\n  // Notification Channels management\n  async getNotificationChannels(): Promise<NotificationChannel[]> {\n    const response = await api.get<NotificationChannelListResponse>(`${this.baseUrl}/channels`);\n    return response.data.data;\n  }\n\n  async createNotificationChannel(data: NotificationChannelCreateRequest): Promise<NotificationChannel> {\n    const response = await api.post<NotificationChannelResponse>(`${this.baseUrl}/channels`, data);\n    return response.data.data;\n  }\n\n  async updateNotificationChannel(id: string, data: NotificationChannelUpdateRequest): Promise<NotificationChannel> {\n    const response = await api.put<NotificationChannelResponse>(`${this.baseUrl}/channels/${id}`, data);\n    return response.data.data;\n  }\n\n  async deleteNotificationChannel(id: string): Promise<void> {\n    await api.delete(`${this.baseUrl}/channels/${id}`);\n  }\n\n  async testNotificationChannel(id: string): Promise<void> {\n    await api.post(`${this.baseUrl}/channels/${id}/test`);\n  }\n\n  // Helper methods for alert level and status handling\n  getAlertLevelColor(level: string): string {\n    switch (level) {\n      case 'info':\n        return 'blue';\n      case 'warning':\n        return 'orange';\n      case 'error':\n        return 'red';\n      case 'critical':\n        return 'red';\n      default:\n        return 'default';\n    }\n  }\n\n  getAlertStatusColor(status: string): string {\n    switch (status) {\n      case 'active':\n        return 'red';\n      case 'acknowledged':\n        return 'orange';\n      case 'resolved':\n        return 'green';\n      default:\n        return 'default';\n    }\n  }\n\n  getAlertLevelText(level: string): string {\n    switch (level) {\n      case 'info':\n        return '信息';\n      case 'warning':\n        return '警告';\n      case 'error':\n        return '错误';\n      case 'critical':\n        return '严重';\n      default:\n        return level;\n    }\n  }\n\n  getAlertStatusText(status: string): string {\n    switch (status) {\n      case 'active':\n        return '活跃';\n      case 'acknowledged':\n        return '已确认';\n      case 'resolved':\n        return '已解决';\n      default:\n        return status;\n    }\n  }\n\n  formatAlertData(data: Record<string, any>): string {\n    try {\n      return JSON.stringify(data, null, 2);\n    } catch {\n      return String(data);\n    }\n  }\n}\n\nexport const alertService = new AlertService();\nexport default alertService;"],"names":["alertService","baseUrl","getAlerts","params","searchParams","URLSearchParams","page","toString","page_size","pageSize","level","append","status","source","search","startTime","toISOString","endTime","api","get","this","data","getAlert","id","createAlert","post","updateAlert","put","deleteAlert","delete","acknowledgeAlert","comment","resolveAlert","getAlertStats","getAlertRules","createAlertRule","updateAlertRule","deleteAlertRule","testAlertRule","testData","getNotificationChannels","createNotificationChannel","updateNotificationChannel","deleteNotificationChannel","testNotificationChannel","getAlertLevelColor","getAlertStatusColor","getAlertLevelText","getAlertStatusText","formatAlertData","JSON","stringify","String"],"mappings":"wCA+LO,MAAMA,EAAe,IAxK5B,MACmBC,QAAU,iBAG3B,eAAMC,CAAUC,GACd,MAAMC,EAAe,IAAIC,gBAAgB,CACvCC,KAAMH,EAAOG,KAAKC,WAClBC,UAAWL,EAAOM,SAASF,aAGzBJ,EAAOO,OAAON,EAAaO,OAAO,QAASR,EAAOO,OAClDP,EAAOS,QAAQR,EAAaO,OAAO,SAAUR,EAAOS,QACpDT,EAAOU,QAAQT,EAAaO,OAAO,SAAUR,EAAOU,QACpDV,EAAOW,QAAQV,EAAaO,OAAO,SAAUR,EAAOW,QACpDX,EAAOY,WAAWX,EAAaO,OAAO,aAAcR,EAAOY,UAAUC,eACrEb,EAAOc,SAASb,EAAaO,OAAO,WAAYR,EAAOc,QAAQD,eAGnE,aADuBE,EAAIC,IAAuB,GAAGC,KAAKnB,WAAWG,MACrDiB,KAAKA,IACvB,CAEA,cAAMC,CAASC,GAEb,aADuBL,EAAIC,IAAmB,GAAGC,KAAKnB,WAAWsB,MACjDF,KAAKA,IACvB,CAEA,iBAAMG,CAAYH,GAEhB,aADuBH,EAAIO,KAAoBL,KAAKnB,QAASoB,IAC7CA,KAAKA,IACvB,CAEA,iBAAMK,CAAYH,EAAYF,GAE5B,aADuBH,EAAIS,IAAmB,GAAGP,KAAKnB,WAAWsB,IAAMF,IACvDA,KAAKA,IACvB,CAEA,iBAAMO,CAAYL,SACVL,EAAIW,OAAO,GAAGT,KAAKnB,WAAWsB,IACtC,CAEA,sBAAMO,CAAiBP,EAAYQ,SAC3Bb,EAAIO,KAAK,GAAGL,KAAKnB,WAAWsB,gBAAkB,CAAEQ,WACxD,CAEA,kBAAMC,CAAaT,EAAYQ,SACvBb,EAAIO,KAAK,GAAGL,KAAKnB,WAAWsB,YAAc,CAAEQ,WACpD,CAEA,mBAAME,GAEJ,aADuBf,EAAIC,IAAwB,GAAGC,KAAKnB,kBAC3CoB,KAAKA,IACvB,CAGA,mBAAMa,GAEJ,aADuBhB,EAAIC,IAA2B,GAAGC,KAAKnB,kBAC9CoB,KAAKA,IACvB,CAEA,qBAAMc,CAAgBd,GAEpB,aADuBH,EAAIO,KAAwB,GAAGL,KAAKnB,gBAAiBoB,IAC5DA,KAAKA,IACvB,CAEA,qBAAMe,CAAgBb,EAAYF,GAEhC,aADuBH,EAAIS,IAAuB,GAAGP,KAAKnB,iBAAiBsB,IAAMF,IACjEA,KAAKA,IACvB,CAEA,qBAAMgB,CAAgBd,SACdL,EAAIW,OAAO,GAAGT,KAAKnB,iBAAiBsB,IAC5C,CAEA,mBAAMe,CAAcf,EAAYgB,GAE9B,aADuBrB,EAAIO,KAA4B,GAAGL,KAAKnB,iBAAiBsB,SAAW,CAAEF,KAAMkB,KACnFlB,KAAKA,IACvB,CAGA,6BAAMmB,GAEJ,aADuBtB,EAAIC,IAAqC,GAAGC,KAAKnB,qBACxDoB,KAAKA,IACvB,CAEA,+BAAMoB,CAA0BpB,GAE9B,aADuBH,EAAIO,KAAkC,GAAGL,KAAKnB,mBAAoBoB,IACzEA,KAAKA,IACvB,CAEA,+BAAMqB,CAA0BnB,EAAYF,GAE1C,aADuBH,EAAIS,IAAiC,GAAGP,KAAKnB,oBAAoBsB,IAAMF,IAC9EA,KAAKA,IACvB,CAEA,+BAAMsB,CAA0BpB,SACxBL,EAAIW,OAAO,GAAGT,KAAKnB,oBAAoBsB,IAC/C,CAEA,6BAAMqB,CAAwBrB,SACtBL,EAAIO,KAAK,GAAGL,KAAKnB,oBAAoBsB,SAC7C,CAGA,kBAAAsB,CAAmBnC,GACjB,OAAQA,GACN,IAAK,OACH,MAAO,OACT,IAAK,UACH,MAAO,SACT,IAAK,QAEL,IAAK,WACH,MAAO,MACT,QACE,MAAO,UAEb,CAEA,mBAAAoC,CAAoBlC,GAClB,OAAQA,GACN,IAAK,SACH,MAAO,MACT,IAAK,eACH,MAAO,SACT,IAAK,WACH,MAAO,QACT,QACE,MAAO,UAEb,CAEA,iBAAAmC,CAAkBrC,GAChB,OAAQA,GACN,IAAK,OACH,MAAO,KACT,IAAK,UACH,MAAO,KACT,IAAK,QACH,MAAO,KACT,IAAK,WACH,MAAO,KACT,QACE,OAAOA,EAEb,CAEA,kBAAAsC,CAAmBpC,GACjB,OAAQA,GACN,IAAK,SACH,MAAO,KACT,IAAK,eACH,MAAO,MACT,IAAK,WACH,MAAO,MACT,QACE,OAAOA,EAEb,CAEA,eAAAqC,CAAgB5B,GACd,IACE,OAAO6B,KAAKC,UAAU9B,EAAM,KAAM,EACpC,CAAA,MACE,OAAO+B,OAAO/B,EAChB,CACF"}