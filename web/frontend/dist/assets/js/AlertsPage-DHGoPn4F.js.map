{"version":3,"file":"AlertsPage-DHGoPn4F.js","sources":["../../../src/pages/AlertsPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Table,\n  Card,\n  Button,\n  Tag,\n  Input,\n  Select,\n\n  Modal,\n  Form,\n  Typography,\n  message,\n  Popconfirm,\n  Tooltip,\n  Tabs,\n  Row,\n  Col,\n  Space,\n  Badge,\n  Divider\n} from 'antd';\nimport {\n  AlertOutlined,\n  PlusOutlined,\n  ReloadOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  CloseCircleOutlined,\n  BellOutlined,\n  SettingOutlined\n} from '@ant-design/icons';\nimport { alertService } from '../services/alertService';\nimport { useRealtimeData } from '../hooks/useRealTimeData';\nimport type { \n  Alert,\n  AlertRule,\n  AlertCreateRequest,\n  AlertRuleCreateRequest,\n  NotificationChannel,\n  NotificationChannelCreateRequest,\n  AlertListRequest\n} from '../types/alert';\n\n// Constants that were imported as types\nconst ALERT_LEVELS = [\n  { value: 'info', label: '信息', color: 'blue' },\n  { value: 'warning', label: '警告', color: 'orange' },\n  { value: 'error', label: '错误', color: 'red' },\n  { value: 'critical', label: '严重', color: 'purple' }\n];\n\nconst ALERT_STATUSES = [\n  { value: 'active', label: '活跃', color: 'red' },\n  { value: 'acknowledged', label: '已确认', color: 'orange' },\n  { value: 'resolved', label: '已解决', color: 'green' }\n];\n\nconst NOTIFICATION_CHANNEL_TYPES = [\n  { value: 'email', label: '邮件', icon: <BellOutlined /> },\n  { value: 'webhook', label: 'Webhook', icon: <BellOutlined /> },\n  { value: 'sms', label: '短信', icon: <BellOutlined /> },\n  { value: 'slack', label: 'Slack', icon: <BellOutlined /> },\n  { value: 'dingtalk', label: '钉钉', icon: <BellOutlined /> }\n];\n\nconst { Text } = Typography;\nconst { Option } = Select;\n\nexport const AlertsPage: React.FC = () => {\n  const [activeTab, setActiveTab] = useState('alerts');\n  const [loading, setLoading] = useState(false);\n  \n  // 告警列表状态\n  const [alerts, setAlerts] = useState<Alert[]>([]);\n  const [alertTotal, setAlertTotal] = useState(0);\n  const [alertFilters, setAlertFilters] = useState<AlertListRequest>({\n    page: 1,\n    pageSize: 20,\n  });\n  \n  // 告警规则状态\n  const [alertRules, setAlertRules] = useState<AlertRule[]>([]);\n  \n  // 通知渠道状态\n  const [notificationChannels, setNotificationChannels] = useState<NotificationChannel[]>([]);\n  \n  // 弹窗状态\n  const [createAlertModalVisible, setCreateAlertModalVisible] = useState(false);\n  const [createRuleModalVisible, setCreateRuleModalVisible] = useState(false);\n  const [createChannelModalVisible, setCreateChannelModalVisible] = useState(false);\n  \n  // 表单\n  const [createAlertForm] = Form.useForm();\n  const [createRuleForm] = Form.useForm();\n  const [createChannelForm] = Form.useForm();\n  \n  // 实时数据\n  const { data: realTimeData } = useRealtimeData({\n    autoConnect: true,\n    enableSystemEvents: true\n  });\n\n  // 加载数据\n  useEffect(() => {\n    if (activeTab === 'alerts') {\n      fetchAlerts();\n    } else if (activeTab === 'rules') {\n      fetchAlertRules();\n    } else if (activeTab === 'channels') {\n      fetchNotificationChannels();\n    }\n  }, [activeTab, alertFilters]);\n\n  // 处理实时告警数据\n  useEffect(() => {\n    if (realTimeData && activeTab === 'alerts') {\n      // 检查是否有新的告警数据，重新加载列表\n      fetchAlerts();\n    }\n  }, [realTimeData, activeTab]);\n\n  // 获取告警列表\n  const fetchAlerts = async () => {\n    try {\n      setLoading(true);\n      const response = await alertService.getAlerts(alertFilters);\n      setAlerts(response.alerts);\n      setAlertTotal(response.total);\n    } catch (error: any) {\n      message.error('获取告警列表失败: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取告警规则\n  const fetchAlertRules = async () => {\n    try {\n      setLoading(true);\n      const rules = await alertService.getAlertRules();\n      setAlertRules(rules);\n    } catch (error: any) {\n      message.error('获取告警规则失败: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取通知渠道\n  const fetchNotificationChannels = async () => {\n    try {\n      setLoading(true);\n      const channels = await alertService.getNotificationChannels();\n      setNotificationChannels(channels);\n    } catch (error: any) {\n      message.error('获取通知渠道失败: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 确认告警\n  const handleAcknowledgeAlert = async (alertId: string) => {\n    try {\n      await alertService.acknowledgeAlert(alertId, '手动确认');\n      message.success('告警确认成功');\n      fetchAlerts();\n    } catch (error: any) {\n      message.error('确认告警失败: ' + error.message);\n    }\n  };\n\n  // 解决告警\n  const handleResolveAlert = async (alertId: string) => {\n    try {\n      await alertService.resolveAlert(alertId, '手动解决');\n      message.success('告警解决成功');\n      fetchAlerts();\n    } catch (error: any) {\n      message.error('解决告警失败: ' + error.message);\n    }\n  };\n\n  // 删除告警\n  const handleDeleteAlert = async (alertId: string) => {\n    try {\n      await alertService.deleteAlert(alertId);\n      message.success('告警删除成功');\n      fetchAlerts();\n    } catch (error: any) {\n      message.error('删除告警失败: ' + error.message);\n    }\n  };\n\n  // 创建告警\n  const handleCreateAlert = async () => {\n    try {\n      const values = await createAlertForm.validateFields();\n      const alertData: AlertCreateRequest = {\n        title: values.title,\n        description: values.description,\n        level: values.level,\n        source: values.source || 'manual',\n        data: values.data ? JSON.parse(values.data) : {},\n      };\n      \n      await alertService.createAlert(alertData);\n      message.success('告警创建成功');\n      setCreateAlertModalVisible(false);\n      createAlertForm.resetFields();\n      fetchAlerts();\n    } catch (error: any) {\n      message.error('创建告警失败: ' + error.message);\n    }\n  };\n\n  // 创建告警规则\n  const handleCreateAlertRule = async () => {\n    try {\n      const values = await createRuleForm.validateFields();\n      const ruleData: AlertRuleCreateRequest = {\n        name: values.name,\n        description: values.description,\n        enabled: values.enabled,\n        level: values.level,\n        condition: {\n          type: values.conditionType,\n          field: values.field,\n          operator: values.operator,\n          value: values.value,\n        },\n        notificationChannels: values.notificationChannels || [],\n      };\n      \n      await alertService.createAlertRule(ruleData);\n      message.success('告警规则创建成功');\n      setCreateRuleModalVisible(false);\n      createRuleForm.resetFields();\n      fetchAlertRules();\n    } catch (error: any) {\n      message.error('创建告警规则失败: ' + error.message);\n    }\n  };\n\n  // 创建通知渠道\n  const handleCreateNotificationChannel = async () => {\n    try {\n      const values = await createChannelForm.validateFields();\n      const channelData: NotificationChannelCreateRequest = {\n        name: values.name,\n        type: values.type,\n        enabled: values.enabled,\n        config: values.config ? JSON.parse(values.config) : {},\n      };\n      \n      await alertService.createNotificationChannel(channelData);\n      message.success('通知渠道创建成功');\n      setCreateChannelModalVisible(false);\n      createChannelForm.resetFields();\n      fetchNotificationChannels();\n    } catch (error: any) {\n      message.error('创建通知渠道失败: ' + error.message);\n    }\n  };\n\n  // 测试通知渠道\n  const handleTestChannel = async (channelId: string) => {\n    try {\n      await alertService.testNotificationChannel(channelId);\n      message.success('测试通知发送成功');\n    } catch (error: any) {\n      message.error('测试通知失败: ' + error.message);\n    }\n  };\n\n  // 告警表格列\n  const alertColumns = [\n    {\n      title: '标题',\n      dataIndex: 'title',\n      key: 'title',\n      ellipsis: true,\n    },\n    {\n      title: '级别',\n      dataIndex: 'level',\n      key: 'level',\n      width: 80,\n      render: (level: string) => (\n        <Tag color={alertService.getAlertLevelColor(level)}>\n          {alertService.getAlertLevelText(level)}\n        </Tag>\n      ),\n    },\n    {\n      title: '状态',\n      dataIndex: 'status',\n      key: 'status',\n      width: 100,\n      render: (status: string) => (\n        <Tag \n          color={alertService.getAlertStatusColor(status)}\n          icon={\n            status === 'active' ? <ExclamationCircleOutlined /> :\n            status === 'acknowledged' ? <CheckCircleOutlined /> :\n            <CloseCircleOutlined />\n          }\n        >\n          {alertService.getAlertStatusText(status)}\n        </Tag>\n      ),\n    },\n    {\n      title: '来源',\n      dataIndex: 'source',\n      key: 'source',\n      width: 120,\n    },\n    {\n      title: '创建时间',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      width: 160,\n      render: (time: string) => new Date(time).toLocaleString(),\n    },\n    {\n      title: '操作',\n      key: 'actions',\n      width: 200,\n      render: (_: any, record: Alert) => (\n        <Space size=\"small\">\n          {record.status === 'active' && (\n            <Tooltip title=\"确认告警\">\n              <Button\n                size=\"small\"\n                icon={<CheckCircleOutlined />}\n                onClick={() => handleAcknowledgeAlert(record.id)}\n              >\n                确认\n              </Button>\n            </Tooltip>\n          )}\n          {(record.status === 'active' || record.status === 'acknowledged') && (\n            <Tooltip title=\"解决告警\">\n              <Button\n                size=\"small\"\n                type=\"primary\"\n                icon={<CloseCircleOutlined />}\n                onClick={() => handleResolveAlert(record.id)}\n              >\n                解决\n              </Button>\n            </Tooltip>\n          )}\n          <Popconfirm\n            title=\"确定要删除这个告警吗？\"\n            onConfirm={() => handleDeleteAlert(record.id)}\n          >\n            <Button size=\"small\" danger>\n              删除\n            </Button>\n          </Popconfirm>\n        </Space>\n      ),\n    },\n  ];\n\n  // 告警规则表格列\n  const ruleColumns = [\n    {\n      title: '名称',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: '级别',\n      dataIndex: 'level',\n      key: 'level',\n      width: 80,\n      render: (level: string) => (\n        <Tag color={alertService.getAlertLevelColor(level)}>\n          {alertService.getAlertLevelText(level)}\n        </Tag>\n      ),\n    },\n    {\n      title: '状态',\n      dataIndex: 'enabled',\n      key: 'enabled',\n      width: 80,\n      render: (enabled: boolean) => (\n        <Badge status={enabled ? 'success' : 'default'} text={enabled ? '启用' : '禁用'} />\n      ),\n    },\n    {\n      title: '条件',\n      key: 'condition',\n      render: (_: any, record: AlertRule) => (\n        <Text code>\n          {record.condition.field} {record.condition.operator} {record.condition.value}\n        </Text>\n      ),\n    },\n    {\n      title: '通知渠道',\n      dataIndex: 'notificationChannels',\n      key: 'notificationChannels',\n      render: (channels: string[]) => (\n        <span>{channels?.length || 0} 个渠道</span>\n      ),\n    },\n    {\n      title: '操作',\n      key: 'actions',\n      width: 150,\n      render: (_: any) => (\n        <Space size=\"small\">\n          <Button size=\"small\">测试</Button>\n          <Button size=\"small\">编辑</Button>\n          <Button size=\"small\" danger>删除</Button>\n        </Space>\n      ),\n    },\n  ];\n\n  // 通知渠道表格列\n  const channelColumns = [\n    {\n      title: '名称',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: '类型',\n      dataIndex: 'type',\n      key: 'type',\n      width: 100,\n      render: (type: string) => {\n        const channelType = NOTIFICATION_CHANNEL_TYPES.find(t => t.value === type);\n        return (\n          <span>\n            {channelType?.icon} {channelType?.label || type}\n          </span>\n        );\n      },\n    },\n    {\n      title: '状态',\n      dataIndex: 'enabled',\n      key: 'enabled',\n      width: 80,\n      render: (enabled: boolean) => (\n        <Badge status={enabled ? 'success' : 'default'} text={enabled ? '启用' : '禁用'} />\n      ),\n    },\n    {\n      title: '创建时间',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      width: 160,\n      render: (time: string) => new Date(time).toLocaleString(),\n    },\n    {\n      title: '操作',\n      key: 'actions',\n      width: 150,\n      render: (_: any, record: NotificationChannel) => (\n        <Space size=\"small\">\n          <Button \n            size=\"small\" \n            icon={<BellOutlined />}\n            onClick={() => handleTestChannel(record.id)}\n          >\n            测试\n          </Button>\n          <Button size=\"small\">编辑</Button>\n          <Button size=\"small\" danger>删除</Button>\n        </Space>\n      ),\n    },\n  ];\n\n  const tabItems = [\n    {\n      key: 'alerts',\n      label: (\n        <span>\n          <AlertOutlined />\n          告警列表\n          {alerts.filter(a => a.status === 'active').length > 0 && (\n            <Badge count={alerts.filter(a => a.status === 'active').length} style={{ marginLeft: 8 }} />\n          )}\n        </span>\n      ),\n      children: (\n        <div>\n          {/* 过滤器 */}\n          <Card size=\"small\" style={{ marginBottom: 16 }}>\n            <Row gutter={16}>\n              <Col span={4}>\n                <Select\n                  placeholder=\"告警级别\"\n                  allowClear\n                  value={alertFilters.level}\n                  onChange={(value) => setAlertFilters({ ...alertFilters, level: value, page: 1 })}\n                >\n                  {ALERT_LEVELS.map(level => (\n                    <Option key={level.value} value={level.value}>\n                      <Tag color={level.color}>{level.label}</Tag>\n                    </Option>\n                  ))}\n                </Select>\n              </Col>\n              <Col span={4}>\n                <Select\n                  placeholder=\"告警状态\"\n                  allowClear\n                  value={alertFilters.status}\n                  onChange={(value) => setAlertFilters({ ...alertFilters, status: value, page: 1 })}\n                >\n                  {ALERT_STATUSES.map(status => (\n                    <Option key={status.value} value={status.value}>\n                      <Tag color={status.color}>{status.label}</Tag>\n                    </Option>\n                  ))}\n                </Select>\n              </Col>\n              <Col span={4}>\n                <Input\n                  placeholder=\"来源筛选\"\n                  allowClear\n                  value={alertFilters.source}\n                  onChange={(e) => setAlertFilters({ ...alertFilters, source: e.target.value, page: 1 })}\n                />\n              </Col>\n              <Col span={6}>\n                <Input.Search\n                  placeholder=\"搜索告警\"\n                  allowClear\n                  value={alertFilters.search}\n                  onChange={(e) => setAlertFilters({ ...alertFilters, search: e.target.value, page: 1 })}\n                  onSearch={() => fetchAlerts()}\n                />\n              </Col>\n              <Col span={6}>\n                <Space>\n                  <Button icon={<ReloadOutlined />} onClick={fetchAlerts}>\n                    刷新\n                  </Button>\n                  <Button \n                    type=\"primary\" \n                    icon={<PlusOutlined />}\n                    onClick={() => setCreateAlertModalVisible(true)}\n                  >\n                    手动创建告警\n                  </Button>\n                </Space>\n              </Col>\n            </Row>\n          </Card>\n\n          {/* 告警表格 */}\n          <Card>\n            <Table\n              columns={alertColumns}\n              dataSource={alerts}\n              rowKey=\"id\"\n              loading={loading}\n              pagination={{\n                current: alertFilters.page,\n                pageSize: alertFilters.pageSize,\n                total: alertTotal,\n                onChange: (page, pageSize) => setAlertFilters({ ...alertFilters, page, pageSize }),\n                showSizeChanger: true,\n                showQuickJumper: true,\n                showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条，共 ${total} 条`,\n              }}\n            />\n          </Card>\n        </div>\n      ),\n    },\n    {\n      key: 'rules',\n      label: (\n        <span>\n          <SettingOutlined />\n          告警规则\n        </span>\n      ),\n      children: (\n        <Card>\n          <div style={{ marginBottom: 16 }}>\n            <Space>\n              <Button icon={<ReloadOutlined />} onClick={fetchAlertRules}>\n                刷新\n              </Button>\n              <Button \n                type=\"primary\" \n                icon={<PlusOutlined />}\n                onClick={() => setCreateRuleModalVisible(true)}\n              >\n                创建规则\n              </Button>\n            </Space>\n          </div>\n          \n          <Table\n            columns={ruleColumns}\n            dataSource={alertRules}\n            rowKey=\"id\"\n            loading={loading}\n            pagination={{ pageSize: 10 }}\n          />\n        </Card>\n      ),\n    },\n    {\n      key: 'channels',\n      label: (\n        <span>\n          <BellOutlined />\n          通知渠道\n        </span>\n      ),\n      children: (\n        <Card>\n          <div style={{ marginBottom: 16 }}>\n            <Space>\n              <Button icon={<ReloadOutlined />} onClick={fetchNotificationChannels}>\n                刷新\n              </Button>\n              <Button \n                type=\"primary\" \n                icon={<PlusOutlined />}\n                onClick={() => setCreateChannelModalVisible(true)}\n              >\n                创建渠道\n              </Button>\n            </Space>\n          </div>\n          \n          <Table\n            columns={channelColumns}\n            dataSource={notificationChannels}\n            rowKey=\"id\"\n            loading={loading}\n            pagination={{ pageSize: 10 }}\n          />\n        </Card>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <h2>告警管理</h2>\n        <Text type=\"secondary\">管理系统告警、告警规则和通知渠道</Text>\n      </div>\n\n      <Tabs\n        activeKey={activeTab}\n        onChange={setActiveTab}\n        items={tabItems}\n      />\n\n      {/* 创建告警弹窗 */}\n      <Modal\n        title=\"创建告警\"\n        open={createAlertModalVisible}\n        onOk={handleCreateAlert}\n        onCancel={() => setCreateAlertModalVisible(false)}\n        width={600}\n      >\n        <Form form={createAlertForm} layout=\"vertical\">\n          <Form.Item name=\"title\" label=\"告警标题\" rules={[{ required: true }]}>\n            <Input placeholder=\"请输入告警标题\" />\n          </Form.Item>\n          <Form.Item name=\"description\" label=\"告警描述\" rules={[{ required: true }]}>\n            <Input.TextArea rows={3} placeholder=\"请输入告警描述\" />\n          </Form.Item>\n          <Row gutter={16}>\n            <Col span={12}>\n              <Form.Item name=\"level\" label=\"告警级别\" rules={[{ required: true }]}>\n                <Select placeholder=\"选择告警级别\">\n                  {ALERT_LEVELS.map(level => (\n                    <Option key={level.value} value={level.value}>\n                      <Tag color={level.color}>{level.label}</Tag>\n                    </Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item name=\"source\" label=\"告警来源\">\n                <Input placeholder=\"请输入告警来源\" />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Form.Item name=\"data\" label=\"附加数据\">\n            <Input.TextArea \n              rows={3} \n              placeholder=\"请输入JSON格式的附加数据（可选）\" \n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* 创建告警规则弹窗 */}\n      <Modal\n        title=\"创建告警规则\"\n        open={createRuleModalVisible}\n        onOk={handleCreateAlertRule}\n        onCancel={() => setCreateRuleModalVisible(false)}\n        width={700}\n      >\n        <Form form={createRuleForm} layout=\"vertical\">\n          <Form.Item name=\"name\" label=\"规则名称\" rules={[{ required: true }]}>\n            <Input placeholder=\"请输入规则名称\" />\n          </Form.Item>\n          <Form.Item name=\"description\" label=\"规则描述\">\n            <Input.TextArea rows={2} placeholder=\"请输入规则描述\" />\n          </Form.Item>\n          <Row gutter={16}>\n            <Col span={12}>\n              <Form.Item name=\"level\" label=\"告警级别\" rules={[{ required: true }]}>\n                <Select placeholder=\"选择告警级别\">\n                  {ALERT_LEVELS.map(level => (\n                    <Option key={level.value} value={level.value}>\n                      <Tag color={level.color}>{level.label}</Tag>\n                    </Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item name=\"enabled\" label=\"启用状态\" initialValue={true}>\n                <Select>\n                  <Option value={true}>启用</Option>\n                  <Option value={false}>禁用</Option>\n                </Select>\n              </Form.Item>\n            </Col>\n          </Row>\n          <Divider>告警条件</Divider>\n          <Row gutter={16}>\n            <Col span={8}>\n              <Form.Item name=\"field\" label=\"字段名\" rules={[{ required: true }]}>\n                <Input placeholder=\"如: temperature\" />\n              </Form.Item>\n            </Col>\n            <Col span={8}>\n              <Form.Item name=\"operator\" label=\"操作符\" rules={[{ required: true }]}>\n                <Select placeholder=\"选择操作符\">\n                  <Option value=\"gt\">大于 (&gt;)</Option>\n                  <Option value=\"lt\">小于 (&lt;)</Option>\n                  <Option value=\"eq\">等于 (=)</Option>\n                  <Option value=\"gte\">大于等于 (≥)</Option>\n                  <Option value=\"lte\">小于等于 (≤)</Option>\n                </Select>\n              </Form.Item>\n            </Col>\n            <Col span={8}>\n              <Form.Item name=\"value\" label=\"阈值\" rules={[{ required: true }]}>\n                <Input placeholder=\"如: 80\" />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Form.Item name=\"notificationChannels\" label=\"通知渠道\">\n            <Select mode=\"multiple\" placeholder=\"选择通知渠道（可选）\">\n              {notificationChannels.map(channel => (\n                <Option key={channel.id} value={channel.id}>\n                  {channel.name}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* 创建通知渠道弹窗 */}\n      <Modal\n        title=\"创建通知渠道\"\n        open={createChannelModalVisible}\n        onOk={handleCreateNotificationChannel}\n        onCancel={() => setCreateChannelModalVisible(false)}\n        width={600}\n      >\n        <Form form={createChannelForm} layout=\"vertical\">\n          <Form.Item name=\"name\" label=\"渠道名称\" rules={[{ required: true }]}>\n            <Input placeholder=\"请输入渠道名称\" />\n          </Form.Item>\n          <Row gutter={16}>\n            <Col span={12}>\n              <Form.Item name=\"type\" label=\"渠道类型\" rules={[{ required: true }]}>\n                <Select placeholder=\"选择渠道类型\">\n                  {NOTIFICATION_CHANNEL_TYPES.map(type => (\n                    <Option key={type.value} value={type.value}>\n                      {type.icon} {type.label}\n                    </Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item name=\"enabled\" label=\"启用状态\" initialValue={true}>\n                <Select>\n                  <Option value={true}>启用</Option>\n                  <Option value={false}>禁用</Option>\n                </Select>\n              </Form.Item>\n            </Col>\n          </Row>\n          <Form.Item name=\"config\" label=\"渠道配置\" rules={[{ required: true }]}>\n            <Input.TextArea \n              rows={6} \n              placeholder=\"请输入JSON格式的渠道配置，例如：&#10;{&#10;  &quot;url&quot;: &quot;https://hooks.slack.com/...&quot;,&#10;  &quot;channel&quot;: &quot;#alerts&quot;&#10;}\" \n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};"],"names":["ALERT_LEVELS","value","label","color","ALERT_STATUSES","NOTIFICATION_CHANNEL_TYPES","icon","jsx","BellOutlined","Text","Typography","Option","Select","AlertsPage","activeTab","setActiveTab","useState","loading","setLoading","alerts","setAlerts","alertTotal","setAlertTotal","alertFilters","setAlertFilters","page","pageSize","alertRules","setAlertRules","notificationChannels","setNotificationChannels","createAlertModalVisible","setCreateAlertModalVisible","createRuleModalVisible","setCreateRuleModalVisible","createChannelModalVisible","setCreateChannelModalVisible","createAlertForm","Form","useForm","createRuleForm","createChannelForm","data","realTimeData","useRealtimeData","autoConnect","enableSystemEvents","useEffect","fetchAlerts","fetchAlertRules","fetchNotificationChannels","async","response","alertService","getAlerts","total","error","message","rules","getAlertRules","channels","getNotificationChannels","alertColumns","title","dataIndex","key","ellipsis","width","render","level","Tag","getAlertLevelColor","children","getAlertLevelText","status","getAlertStatusColor","ExclamationCircleOutlined","CheckCircleOutlined","CloseCircleOutlined","getAlertStatusText","time","Date","toLocaleString","_","record","jsxs","Space","size","Tooltip","Button","onClick","alertId","acknowledgeAlert","success","handleAcknowledgeAlert","id","type","resolveAlert","handleResolveAlert","Popconfirm","onConfirm","deleteAlert","handleDeleteAlert","danger","ruleColumns","enabled","Badge","text","code","condition","field","operator","length","channelColumns","channelType","find","t","channelId","testNotificationChannel","handleTestChannel","tabItems","AlertOutlined","filter","a","count","style","marginLeft","Card","marginBottom","Row","gutter","Col","span","placeholder","allowClear","onChange","map","Input","source","e","target","Search","search","onSearch","ReloadOutlined","PlusOutlined","Table","columns","dataSource","rowKey","pagination","current","showSizeChanger","showQuickJumper","showTotal","range","SettingOutlined","Tabs","activeKey","items","Modal","open","onOk","values","validateFields","alertData","description","JSON","parse","createAlert","resetFields","onCancel","form","layout","Item","name","required","TextArea","rows","ruleData","conditionType","createAlertRule","initialValue","Divider","mode","channel","channelData","config","createNotificationChannel"],"mappings":"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"}