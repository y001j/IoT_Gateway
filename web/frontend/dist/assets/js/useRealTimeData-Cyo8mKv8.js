import{r as e}from"./react-vendor-XKB30K_c.js";import{u as t}from"./index-SZKmSCox.js";const s=new class{ws=null;url="";token="";callbacks={};reconnectInterval=5e3;maxReconnectAttempts=10;reconnectAttempts=0;isConnecting=!1;isManuallyDisconnected=!1;constructor(){const e="https:"===window.location.protocol?"wss:":"ws:",t=window.location.host;this.url=`${e}//${t}/api/v1/ws/realtime`}setToken(e){this.token=e}setCallbacks(e){this.callbacks={...this.callbacks,...e}}connect(){return new Promise((e,t)=>{if(this.isConnecting||this.isConnected())e();else if(this.token){this.isConnecting=!0,this.isManuallyDisconnected=!1;try{const s=`${this.url}?token=${encodeURIComponent(this.token)}`;this.ws=new WebSocket(s),this.ws.onopen=()=>{console.log("WebSocket 连接已建立"),this.isConnecting=!1,this.reconnectAttempts=0,this.callbacks.onConnect?.(),e()},this.ws.onmessage=e=>{try{const t=JSON.parse(e.data);this.handleMessage(t)}catch(t){console.error("解析 WebSocket 消息失败:",t)}},this.ws.onclose=e=>{console.log("WebSocket 连接已关闭:",e.code,e.reason),this.isConnecting=!1,this.ws=null,this.callbacks.onDisconnect?.(),!this.isManuallyDisconnected&&this.reconnectAttempts<this.maxReconnectAttempts&&setTimeout(()=>{this.reconnectAttempts++,console.log(`尝试重连 WebSocket (${this.reconnectAttempts}/${this.maxReconnectAttempts})`),this.connect().catch(console.error)},this.reconnectInterval)},this.ws.onerror=e=>{console.error("WebSocket 错误:",e),this.isConnecting=!1,this.callbacks.onError?.(e),t(e)}}catch(s){this.isConnecting=!1,t(s)}}else t(new Error("认证令牌未设置"))})}disconnect(){this.isManuallyDisconnected=!0,this.ws&&(this.ws.close(),this.ws=null)}isConnected(){return this.ws?.readyState===WebSocket.OPEN}send(e,t){if(this.ws&&this.ws.readyState===WebSocket.OPEN){const s={type:e,data:t,timestamp:Date.now()};this.ws.send(JSON.stringify(s))}else console.warn("WebSocket is not connected. Cannot send message:",{type:e,data:t})}ping(){this.send("ping",{})}subscribe(e){this.send("subscribe",{topics:e})}unsubscribe(e){this.send("unsubscribe",{topics:e})}handleMessage(e){switch(console.log("收到 WebSocket 消息:",e),e.type){case"welcome":console.log("收到欢迎消息:",e.data);break;case"pong":console.log("收到 pong 响应");break;case"error":console.error("服务器错误:",e.data);break;default:this.callbacks.onMessage?.(e)}}getConnectionState(){if(!this.ws)return"DISCONNECTED";switch(this.ws.readyState){case WebSocket.CONNECTING:return"CONNECTING";case WebSocket.OPEN:return"CONNECTED";case WebSocket.CLOSING:return"CLOSING";case WebSocket.CLOSED:return"DISCONNECTED";default:return"UNKNOWN"}}},n={autoConnect:!0,enableSystemUpdates:!0,enableIotData:!0,enableRuleEvents:!0,enableSystemEvents:!0,maxDataPoints:100},a=(a={})=>{const c={...n,...a},o=t(e=>e.accessToken),[i,l]=e.useState({systemStatus:null,systemMetrics:null,pluginStatus:null,healthCheck:null,iotData:[],ruleEvents:[],systemEvents:[],connectionState:"DISCONNECTED",lastUpdateTime:null});e.useRef(i).current=i;const r=e.useCallback(e=>{const t=new Date;l(s=>{const n={...s,lastUpdateTime:t};switch(e.type){case"system_status":case"system_status_update":c.enableSystemUpdates&&(n.systemStatus=e.data);break;case"system_metrics":case"system_metrics_update":c.enableSystemUpdates&&(n.systemMetrics=e.data);break;case"plugin_status":c.enableSystemUpdates&&(n.pluginStatus=e.data);break;case"health_check":c.enableSystemUpdates&&(n.healthCheck=e.data);break;case"iot_data":if(c.enableIotData){const a={...e.data,timestamp:t.toISOString()},o=[...s.iotData,a];o.length>(c.maxDataPoints||100)&&o.splice(0,o.length-(c.maxDataPoints||100)),n.iotData=o}break;case"rule_event":if(c.enableRuleEvents){const a={...e.data,timestamp:t.toISOString()},o=[...s.ruleEvents,a];o.length>(c.maxDataPoints||100)&&o.splice(0,o.length-(c.maxDataPoints||100)),n.ruleEvents=o}break;case"system_event":if(c.enableSystemEvents){const a={...e.data,timestamp:t.toISOString()},o=[...s.systemEvents,a];o.length>(c.maxDataPoints||100)&&o.splice(0,o.length-(c.maxDataPoints||100)),n.systemEvents=o}break;default:console.log("收到未处理的消息类型:",e.type)}return n})},[c]),u=e.useCallback(()=>{console.log("WebSocket 已连接"),l(e=>({...e,connectionState:"CONNECTED"}))},[]),h=e.useCallback(()=>{console.log("WebSocket 已断开"),l(e=>({...e,connectionState:"DISCONNECTED"}))},[]),b=e.useCallback(e=>{console.error("WebSocket 错误:",e),l(e=>({...e,connectionState:"ERROR"}))},[]),m=e.useCallback(async()=>{if(o)try{s.setToken(o),s.setCallbacks({onMessage:r,onConnect:u,onDisconnect:h,onError:b}),await s.connect();const e=[];c.enableSystemUpdates&&e.push("system_status","system_metrics","plugin_status","health_check"),c.enableIotData&&e.push("iot_data"),c.enableRuleEvents&&e.push("rule_event"),c.enableSystemEvents&&e.push("system_event"),e.length>0&&s.subscribe(e)}catch(e){console.error("连接 WebSocket 失败:",e),l(e=>({...e,connectionState:"ERROR"}))}else console.warn("无法连接 WebSocket: 缺少认证令牌")},[o,r,u,h,b,c]),S=e.useCallback(()=>{s.disconnect(),l(e=>({...e,connectionState:"DISCONNECTED"}))},[]),k=e.useCallback(()=>{S(),setTimeout(m,1e3)},[m,S]),C=e.useCallback((e,t)=>{s.send(e,t)},[]),d=e.useCallback(()=>{s.ping()},[]),p=e.useCallback(e=>{l(t=>{if(e){const s={...t};return s[e]="iotData"===e||"ruleEvents"===e||"systemEvents"===e?[]:null,s}return{...t,systemStatus:null,systemMetrics:null,pluginStatus:null,healthCheck:null,iotData:[],ruleEvents:[],systemEvents:[]}})},[]);return e.useEffect(()=>(c.autoConnect&&o&&m(),()=>{s.isConnected()&&s.disconnect()}),[o,c.autoConnect,m]),e.useEffect(()=>{const e=setInterval(()=>{const e=s.getConnectionState();l(t=>t.connectionState!==e?{...t,connectionState:e}:t)},1e3);return()=>clearInterval(e)},[]),{data:i,isConnected:"CONNECTED"===i.connectionState,isConnecting:"CONNECTING"===i.connectionState,connectionState:i.connectionState,connect:m,disconnect:S,reconnect:k,sendMessage:C,ping:d,clearData:p}};export{a as u};
//# sourceMappingURL=useRealTimeData-Cyo8mKv8.js.map
