{"version":3,"file":"MonitoringPage-pT9ry3lq.js","sources":["../../../src/services/monitoringService.ts","../../../src/components/charts/DataFlowChart.tsx","../../../src/types/monitoring.ts","../../../src/pages/MonitoringPage.tsx"],"sourcesContent":["import api from './api';\nimport type {\n  AdapterStatusResponse,\n  DataFlowMetricsResponse,\n  AdapterDiagnosticsResponse,\n  AdapterStatus,\n  SinkStatus,\n  ConnectionOverview,\n  DataFlowMetrics,\n  AdapterDiagnostics,\n} from '../types/monitoring';\nimport type { BaseResponse } from '../types/common';\n\nclass MonitoringService {\n  private baseUrl = '/api/v1/monitoring';\n\n  /**\n   * 获取适配器状态列表\n   */\n  async getAdapterStatus(): Promise<{\n    adapters: AdapterStatus[];\n    sinks: SinkStatus[];\n    overview: ConnectionOverview;\n  }> {\n    const response = await api.get<AdapterStatusResponse>(`${this.baseUrl}/adapters/status`);\n    return response.data.data;\n  }\n\n  /**\n   * 获取数据流指标\n   */\n  async getDataFlowMetrics(params?: {\n    time_range?: string;\n    limit?: number;\n  }): Promise<{\n    metrics: DataFlowMetrics[];\n    time_range: string;\n    granularity: string;\n    total_points: number;\n  }> {\n    const searchParams = new URLSearchParams();\n    if (params?.time_range) {\n      searchParams.append('time_range', params.time_range);\n    }\n    if (params?.limit) {\n      searchParams.append('limit', params.limit.toString());\n    }\n\n    const url = `${this.baseUrl}/adapters/data-flow${searchParams.toString() ? `?${searchParams.toString()}` : ''}`;\n    const response = await api.get<DataFlowMetricsResponse>(url);\n    return response.data.data;\n  }\n\n  /**\n   * 获取适配器诊断信息\n   */\n  async getAdapterDiagnostics(adapterName: string): Promise<AdapterDiagnostics> {\n    const response = await api.get<AdapterDiagnosticsResponse>(\n      `${this.baseUrl}/adapters/${encodeURIComponent(adapterName)}/diagnostics`\n    );\n    return response.data.data;\n  }\n\n  /**\n   * 测试适配器连接\n   */\n  async testAdapterConnection(adapterName: string): Promise<any> {\n    const response = await api.post<BaseResponse>(\n      `${this.baseUrl}/adapters/${encodeURIComponent(adapterName)}/test-connection`\n    );\n    return response.data;\n  }\n\n  /**\n   * 获取适配器性能指标\n   */\n  async getAdapterPerformance(adapterName: string, period?: string): Promise<any> {\n    const searchParams = new URLSearchParams();\n    if (period) {\n      searchParams.append('period', period);\n    }\n\n    const url = `${this.baseUrl}/adapters/${encodeURIComponent(adapterName)}/performance${searchParams.toString() ? `?${searchParams.toString()}` : ''}`;\n    const response = await api.get<BaseResponse>(url);\n    return response.data;\n  }\n\n  /**\n   * 重启适配器\n   */\n  async restartAdapter(adapterName: string): Promise<void> {\n    await api.post<BaseResponse>(\n      `${this.baseUrl}/adapters/${encodeURIComponent(adapterName)}/restart`\n    );\n  }\n\n  /**\n   * 格式化运行时间\n   */\n  formatUptime(seconds: number): string {\n    if (seconds < 60) {\n      return `${Math.floor(seconds)}秒`;\n    } else if (seconds < 3600) {\n      const minutes = Math.floor(seconds / 60);\n      return `${minutes}分钟`;\n    } else if (seconds < 86400) {\n      const hours = Math.floor(seconds / 3600);\n      const minutes = Math.floor((seconds % 3600) / 60);\n      return `${hours}小时${minutes}分钟`;\n    } else {\n      const days = Math.floor(seconds / 86400);\n      const hours = Math.floor((seconds % 86400) / 3600);\n      return `${days}天${hours}小时`;\n    }\n  }\n\n  /**\n   * 格式化数据大小\n   */\n  formatBytes(bytes: number): string {\n    if (bytes === 0) return '0 B';\n\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(1))} ${sizes[i]}`;\n  }\n\n  /**\n   * 格式化数字显示\n   */\n  formatNumber(num: number, decimals: number = 1): string {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(decimals)}M`;\n    } else if (num >= 1000) {\n      return `${(num / 1000).toFixed(decimals)}K`;\n    } else {\n      return num.toFixed(decimals);\n    }\n  }\n\n  /**\n   * 格式化延迟时间\n   */\n  formatLatency(ms: number): string {\n    if (ms < 1) {\n      return `${(ms * 1000).toFixed(0)}μs`;\n    } else if (ms < 1000) {\n      return `${ms.toFixed(1)}ms`;\n    } else {\n      return `${(ms / 1000).toFixed(2)}s`;\n    }\n  }\n\n  /**\n   * 获取状态颜色\n   */\n  getStatusColor(status: string): string {\n    switch (status) {\n      case 'running':\n        return 'success';\n      case 'stopped':\n        return 'default';\n      case 'error':\n        return 'error';\n      default:\n        return 'default';\n    }\n  }\n\n  /**\n   * 获取健康状态颜色\n   */\n  getHealthColor(health: string): string {\n    switch (health) {\n      case 'healthy':\n        return 'success';\n      case 'degraded':\n        return 'warning';\n      case 'unhealthy':\n        return 'error';\n      case 'unknown':\n      default:\n        return 'default';\n    }\n  }\n\n  /**\n   * 获取状态文本\n   */\n  getStatusText(status: string): string {\n    switch (status) {\n      case 'running':\n        return '运行中';\n      case 'stopped':\n        return '已停止';\n      case 'error':\n        return '错误';\n      default:\n        return '未知';\n    }\n  }\n\n  /**\n   * 获取健康状态文本\n   */\n  getHealthText(health: string): string {\n    switch (health) {\n      case 'healthy':\n        return '健康';\n      case 'degraded':\n        return '降级';\n      case 'unhealthy':\n        return '不健康';\n      case 'unknown':\n      default:\n        return '未知';\n    }\n  }\n\n  /**\n   * 计算健康评分\n   */\n  calculateHealthScore(adapter: AdapterStatus): number {\n    let score = 100;\n\n    // 状态影响\n    if (adapter.status === 'error') {\n      score -= 50;\n    } else if (adapter.status === 'stopped') {\n      score -= 30;\n    }\n\n    // 健康状态影响\n    if (adapter.health === 'unhealthy') {\n      score -= 30;\n    } else if (adapter.health === 'degraded') {\n      score -= 15;\n    }\n\n    // 错误率影响\n    if (adapter.data_points_count > 0) {\n      const errorRate = adapter.errors_count / adapter.data_points_count;\n      score -= errorRate * 20;\n    }\n\n    // 响应时间影响\n    if (adapter.response_time_ms > 1000) {\n      score -= 10;\n    } else if (adapter.response_time_ms > 500) {\n      score -= 5;\n    }\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  /**\n   * 获取适配器图标\n   */\n  getAdapterIcon(type: string): string {\n    switch (type.toLowerCase()) {\n      case 'modbus':\n        return '🔌';\n      case 'mqtt':\n        return '📡';\n      case 'http':\n        return '🌐';\n      case 'mock':\n        return '🎭';\n      default:\n        return '📱';\n    }\n  }\n\n  /**\n   * 获取连接器图标\n   */\n  getSinkIcon(type: string): string {\n    switch (type.toLowerCase()) {\n      case 'mqtt':\n        return '📡';\n      case 'influxdb':\n        return '📊';\n      case 'redis':\n        return '🔄';\n      case 'console':\n        return '💻';\n      case 'websocket':\n        return '🔗';\n      case 'jetstream':\n        return '🚀';\n      default:\n        return '📤';\n    }\n  }\n}\n\nexport const monitoringService = new MonitoringService();","import React, { useEffect, useState, useRef } from 'react';\nimport { Card, Select, Row, Col, Typography, Button, Alert, Space, Statistic } from 'antd';\nimport { LineChartOutlined, ReloadOutlined, BarChartOutlined } from '@ant-design/icons';\nimport * as echarts from 'echarts';\nimport { monitoringService } from '../../services/monitoringService';\nimport type { DataFlowMetrics } from '../../types/monitoring';\n\n// Time range options constant\nconst TIME_RANGE_OPTIONS = [\n  { value: '1h', label: '过去1小时' },\n  { value: '6h', label: '过去6小时' },\n  { value: '12h', label: '过去12小时' },\n  { value: '24h', label: '过去24小时' },\n  { value: '7d', label: '过去7天' },\n];\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\ninterface DataFlowChartProps {\n  height?: number;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n}\n\ninterface ChartData {\n  time: string[];\n  throughput: number[];\n  latency: number[];\n  errorRate: number[];\n  devices: { name: string; value: number }[];\n}\n\nconst DataFlowChart: React.FC<DataFlowChartProps> = ({\n  height = 400,\n  autoRefresh = true,\n  refreshInterval = 10000,\n}) => {\n  // 状态管理\n  const [chartData, setChartData] = useState<ChartData>({\n    time: [],\n    throughput: [],\n    latency: [],\n    errorRate: [],\n    devices: []\n  });\n  const [loading, setLoading] = useState(false);\n  const [timeRange, setTimeRange] = useState('1h');\n  const [chartType, setChartType] = useState<'line' | 'bar'>('line');\n  const [, setError] = useState<string | null>(null);\n\n  // Chart实例引用\n  const throughputChartRef = useRef<HTMLDivElement>(null);\n  const latencyChartRef = useRef<HTMLDivElement>(null);\n  const errorChartRef = useRef<HTMLDivElement>(null);\n  const deviceChartRef = useRef<HTMLDivElement>(null);\n  \n  const throughputChart = useRef<echarts.ECharts | null>(null);\n  const latencyChart = useRef<echarts.ECharts | null>(null);\n  const errorChart = useRef<echarts.ECharts | null>(null);\n  const deviceChart = useRef<echarts.ECharts | null>(null);\n\n  // 数据加载\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const endTime = new Date();\n      const startTime = new Date();\n      \n      // 根据时间范围调整开始时间\n      switch (timeRange) {\n        case '1h':\n          startTime.setHours(endTime.getHours() - 1);\n          break;\n        case '6h':\n          startTime.setHours(endTime.getHours() - 6);\n          break;\n        case '12h':\n          startTime.setHours(endTime.getHours() - 12);\n          break;\n        case '24h':\n          startTime.setDate(endTime.getDate() - 1);\n          break;\n        case '7d':\n          startTime.setDate(endTime.getDate() - 7);\n          break;\n      }\n\n      // 模拟数据加载（实际应该调用API）\n      const metrics = await monitoringService.getDataFlowMetrics({\n        time_range: timeRange,\n        limit: 100\n      });\n      \n      const processedData = processChartData(metrics.metrics || []);\n      setChartData(processedData);\n      \n    } catch (err: unknown) {\n      console.error('获取数据流指标失败:', err);\n      setError(err instanceof Error ? err.message : '未知错误');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 处理图表数据\n  const processChartData = (metrics: DataFlowMetrics[]) => {\n    const now = new Date();\n    const timePoints = [];\n    const throughputData = [];\n    const latencyData = [];\n    const errorRateData = [];\n    \n    // 生成时间点\n    for (let i = 23; i >= 0; i--) {\n      const time = new Date(now.getTime() - i * 300000); // 每5分钟一个点\n      timePoints.push(time.toISOString());\n      \n      // 模拟数据（实际应该根据metrics计算）\n      throughputData.push(Math.floor(Math.random() * 100) + 50);\n      latencyData.push(Math.floor(Math.random() * 50) + 10);\n      errorRateData.push(Math.random() * 5);\n    }\n    \n    // 处理设备分布数据\n    const deviceMap = new Map<string, number>();\n    metrics.forEach(metric => {\n      const count = deviceMap.get(metric.device_id) || 0;\n      deviceMap.set(metric.device_id, count + 1);\n    });\n    \n    const devices = Array.from(deviceMap.entries()).map(([name, value]) => ({ name, value }));\n    \n    return {\n      time: timePoints,\n      throughput: throughputData,\n      latency: latencyData,\n      errorRate: errorRateData,\n      devices\n    };\n  };\n\n  // 初始化图表\n  const initCharts = () => {\n    if (throughputChartRef.current) {\n      throughputChart.current = echarts.init(throughputChartRef.current);\n    }\n    if (latencyChartRef.current) {\n      latencyChart.current = echarts.init(latencyChartRef.current);\n    }\n    if (errorChartRef.current) {\n      errorChart.current = echarts.init(errorChartRef.current);\n    }\n    if (deviceChartRef.current) {\n      deviceChart.current = echarts.init(deviceChartRef.current);\n    }\n  };\n\n  // 更新图表\n  const updateCharts = () => {\n    // 吞吐量图表\n    if (throughputChart.current) {\n      const option = {\n        title: {\n          text: '数据吞吐量',\n          left: 'center',\n          textStyle: { fontSize: 14 },\n        },\n        tooltip: {\n          trigger: 'axis',\n          formatter: '{b}<br/>吞吐量: {c} 点/秒',\n        },\n        xAxis: {\n          type: 'category',\n          data: chartData.time,\n          axisLabel: { fontSize: 10 },\n        },\n        yAxis: {\n          type: 'value',\n          name: '点/秒',\n          axisLabel: { fontSize: 10 },\n        },\n        series: [{\n          data: chartData.throughput,\n          type: chartType,\n          smooth: true,\n          areaStyle: chartType === 'line' ? { opacity: 0.3 } : undefined,\n          itemStyle: { color: '#1890ff' },\n        }],\n        grid: {\n          left: 60,\n          right: 20,\n          top: 50,\n          bottom: 40,\n        },\n      };\n      throughputChart.current.setOption(option);\n    }\n\n    // 延迟图表\n    if (latencyChart.current) {\n      const option = {\n        title: {\n          text: '网络延迟',\n          left: 'center',\n          textStyle: { fontSize: 14 },\n        },\n        tooltip: {\n          trigger: 'axis',\n          formatter: '{b}<br/>延迟: {c} ms',\n        },\n        xAxis: {\n          type: 'category',\n          data: chartData.time,\n          axisLabel: { fontSize: 10 },\n        },\n        yAxis: {\n          type: 'value',\n          name: '毫秒',\n          axisLabel: { fontSize: 10 },\n        },\n        series: [{\n          data: chartData.latency,\n          type: chartType,\n          smooth: true,\n          areaStyle: chartType === 'line' ? { opacity: 0.3 } : undefined,\n          itemStyle: { color: '#52c41a' },\n        }],\n        grid: {\n          left: 60,\n          right: 20,\n          top: 50,\n          bottom: 40,\n        },\n      };\n      latencyChart.current.setOption(option);\n    }\n\n    // 错误率图表\n    if (errorChart.current) {\n      const option = {\n        title: {\n          text: '错误率',\n          left: 'center',\n          textStyle: { fontSize: 14 },\n        },\n        tooltip: {\n          trigger: 'axis',\n          formatter: '{b}<br/>错误率: {c}%',\n        },\n        xAxis: {\n          type: 'category',\n          data: chartData.time,\n          axisLabel: { fontSize: 10 },\n        },\n        yAxis: {\n          type: 'value',\n          name: '%',\n          max: 100,\n          axisLabel: { fontSize: 10 },\n        },\n        series: [{\n          data: chartData.errorRate.map(rate => (rate * 100).toFixed(2)),\n          type: chartType,\n          smooth: true,\n          areaStyle: chartType === 'line' ? { opacity: 0.3 } : undefined,\n          itemStyle: { color: '#f5222d' },\n        }],\n        grid: {\n          left: 60,\n          right: 20,\n          top: 50,\n          bottom: 40,\n        },\n      };\n      errorChart.current.setOption(option);\n    }\n\n    // 设备分布图表（饼图）\n    if (deviceChart.current) {\n      const option = {\n        title: {\n          text: '设备数据分布',\n          left: 'center',\n          textStyle: { fontSize: 14 },\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: '{a}<br/>{b}: {c} ({d}%)',\n        },\n        legend: {\n          bottom: 10,\n          left: 'center',\n          textStyle: { fontSize: 10 },\n        },\n        series: [{\n          name: '设备数据量',\n          type: 'pie',\n          radius: ['40%', '70%'],\n          center: ['50%', '45%'],\n          avoidLabelOverlap: false,\n          label: {\n            show: false,\n          },\n          emphasis: {\n            label: {\n              show: true,\n              fontSize: 12,\n              fontWeight: 'bold',\n            },\n          },\n          data: chartData.devices,\n        }],\n      };\n      deviceChart.current.setOption(option);\n    }\n  };\n\n  // 窗口大小变化时调整图表\n  const handleResize = () => {\n    throughputChart.current?.resize();\n    latencyChart.current?.resize();\n    errorChart.current?.resize();\n    deviceChart.current?.resize();\n  };\n\n  // 组件挂载和卸载\n  useEffect(() => {\n    initCharts();\n    loadData();\n\n    window.addEventListener('resize', handleResize);\n    \n    return () => {\n      window.removeEventListener('resize', handleResize);\n      throughputChart.current?.dispose();\n      latencyChart.current?.dispose();\n      errorChart.current?.dispose();\n      deviceChart.current?.dispose();\n    };\n  }, []);\n\n  // 数据变化时更新图表\n  useEffect(() => {\n    updateCharts();\n  }, [chartData, chartType]);\n\n  // 时间范围变化时重新加载数据\n  useEffect(() => {\n    loadData();\n  }, [timeRange]);\n\n  // 自动刷新\n  useEffect(() => {\n    if (!autoRefresh) return;\n\n    const interval = setInterval(loadData, refreshInterval);\n    return () => clearInterval(interval);\n  }, [autoRefresh, refreshInterval, timeRange]);\n\n  // 计算总体指标\n  const totalThroughput = chartData.throughput.reduce((sum, value) => sum + value, 0);\n  const avgLatency = chartData.latency.reduce((sum, value) => sum + value, 0) / chartData.latency.length;\n  const avgErrorRate = chartData.errorRate.reduce((sum, value) => sum + value, 0) / chartData.errorRate.length;\n  const activeDevices = chartData.devices.length;\n\n  return (\n    <div>\n      {/* 控制面板 */}\n      <Card size=\"small\" style={{ marginBottom: 16 }}>\n        <Row gutter={16} align=\"middle\">\n          <Col>\n            <Space>\n              <Text>时间范围:</Text>\n              <Select value={timeRange} onChange={setTimeRange} style={{ width: 120 }}>\n                {TIME_RANGE_OPTIONS.map(option => (\n                  <Option key={option.value} value={option.value}>\n                    {option.label}\n                  </Option>\n                ))}\n              </Select>\n            </Space>\n          </Col>\n          <Col>\n            <Space>\n              <Text>图表类型:</Text>\n              <Select value={chartType} onChange={setChartType} style={{ width: 100 }}>\n                <Option value=\"line\">\n                  <LineChartOutlined /> 折线图\n                </Option>\n                <Option value=\"bar\">\n                  <BarChartOutlined /> 柱状图\n                </Option>\n              </Select>\n            </Space>\n          </Col>\n          <Col>\n            <Button icon={<ReloadOutlined />} onClick={loadData} loading={loading}>\n              刷新\n            </Button>\n          </Col>\n        </Row>\n      </Card>\n\n      {/* 统计信息 */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n        <Col xs={24} sm={6}>\n          <Card size=\"small\">\n            <Statistic\n              title=\"总吞吐量\"\n              value={totalThroughput.toFixed(1)}\n              suffix=\"点/秒\"\n              valueStyle={{ color: '#1890ff', fontSize: '18px' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={6}>\n          <Card size=\"small\">\n            <Statistic\n              title=\"平均延迟\"\n              value={avgLatency.toFixed(1)}\n              suffix=\"ms\"\n              valueStyle={{ color: '#52c41a', fontSize: '18px' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={6}>\n          <Card size=\"small\">\n            <Statistic\n              title=\"错误率\"\n              value={(avgErrorRate * 100).toFixed(2)}\n              suffix=\"%\"\n              valueStyle={{ \n                color: avgErrorRate > 0.05 ? '#f5222d' : '#52c41a',\n                fontSize: '18px' \n              }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={6}>\n          <Card size=\"small\">\n            <Statistic\n              title=\"活跃设备\"\n              value={activeDevices}\n              suffix=\"个\"\n              valueStyle={{ color: '#722ed1', fontSize: '18px' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* 数据流图表 */}\n      <Row gutter={[16, 16]}>\n        <Col xs={24} lg={12}>\n          <Card size=\"small\">\n            <div ref={throughputChartRef} style={{ height: height / 2 }} />\n          </Card>\n        </Col>\n        <Col xs={24} lg={12}>\n          <Card size=\"small\">\n            <div ref={latencyChartRef} style={{ height: height / 2 }} />\n          </Card>\n        </Col>\n        <Col xs={24} lg={12}>\n          <Card size=\"small\">\n            <div ref={errorChartRef} style={{ height: height / 2 }} />\n          </Card>\n        </Col>\n        <Col xs={24} lg={12}>\n          <Card size=\"small\">\n            <div ref={deviceChartRef} style={{ height: height / 2 }} />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* 当没有数据时显示提示 */}\n      {chartData.devices.length === 0 && !loading && (\n        <Alert\n          message=\"暂无数据流数据\"\n          description=\"当前没有检测到数据流活动，请检查适配器是否正在运行并产生数据。\"\n          type=\"info\"\n          showIcon\n          style={{ marginTop: 16 }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default DataFlowChart;","import { BaseResponse } from './common';\n\n// 适配器状态信息\nexport interface AdapterStatus {\n  name: string;\n  type: string;\n  status: 'running' | 'stopped' | 'error';\n  health: 'healthy' | 'degraded' | 'unhealthy' | 'unknown';\n  health_message: string;\n  start_time?: string;\n  last_data_time?: string;\n  connection_uptime: number;\n  data_points_count: number;\n  errors_count: number;\n  last_error: string;\n  response_time_ms: number;\n  config?: Record<string, string | number | boolean>;\n  tags: Record<string, string>;\n}\n\n// 连接器状态信息\nexport interface SinkStatus {\n  name: string;\n  type: string;\n  status: 'running' | 'stopped' | 'error';\n  health: 'healthy' | 'degraded' | 'unhealthy' | 'unknown';\n  health_message: string;\n  start_time?: string;\n  last_publish_time?: string;\n  connection_uptime: number;\n  messages_published: number;\n  errors_count: number;\n  last_error: string;\n  response_time_ms: number;\n  config?: Record<string, string | number | boolean>;\n  tags: Record<string, string>;\n}\n\n// 连接概览信息\nexport interface ConnectionOverview {\n  total_adapters: number;\n  running_adapters: number;\n  healthy_adapters: number;\n  total_sinks: number;\n  running_sinks: number;\n  healthy_sinks: number;\n  total_data_points_per_sec: number;\n  total_errors_per_sec: number;\n  active_connections: number;\n  system_health: 'healthy' | 'degraded' | 'unhealthy' | 'stopped';\n  top_adapters_by_traffic: DataFlowMetrics[];\n}\n\n// 数据流指标\nexport interface DataFlowMetrics {\n  adapter_name: string;\n  device_id: string;\n  key: string;\n  data_points_per_sec: number;\n  bytes_per_sec: number;\n  latency_ms: number;\n  error_rate: number;\n  last_value: string | number | boolean | null;\n  last_timestamp: string;\n}\n\n// 适配器诊断信息\nexport interface AdapterDiagnostics {\n  adapter_name: string;\n  connection_test?: ConnectionTestResult;\n  config_validation?: ConfigValidationResult;\n  health_checks: HealthCheckResult[];\n  performance_test?: PerformanceTestResult;\n  recommendations: string[];\n}\n\n// 连接测试结果\nexport interface ConnectionTestResult {\n  success: boolean;\n  response_time: number;\n  error: string;\n  details: Record<string, string | number | boolean>;\n  timestamp: string;\n}\n\n// 配置验证结果\nexport interface ConfigValidationResult {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n  suggestions: string[];\n  timestamp: string;\n}\n\n// 健康检查结果\nexport interface HealthCheckResult {\n  check_name: string;\n  status: 'pass' | 'warn' | 'fail';\n  message: string;\n  duration: number;\n  timestamp: string;\n  details: Record<string, string | number | boolean>;\n}\n\n// 性能测试结果\nexport interface PerformanceTestResult {\n  throughput_per_sec: number;\n  avg_latency: number;\n  max_latency: number;\n  min_latency: number;\n  error_rate: number;\n  test_duration: number;\n  sample_count: number;\n  timestamp: string;\n}\n\n// API响应类型\nexport interface AdapterStatusResponse extends BaseResponse {\n  data: {\n    adapters: AdapterStatus[];\n    sinks: SinkStatus[];\n    overview: ConnectionOverview;\n  };\n}\n\nexport interface DataFlowMetricsResponse extends BaseResponse {\n  data: {\n    metrics: DataFlowMetrics[];\n    time_range: string;\n    granularity: string;\n    total_points: number;\n  };\n}\n\nexport interface AdapterDiagnosticsResponse extends BaseResponse {\n  data: AdapterDiagnostics;\n}\n\n// 状态和健康状态相关的配置\nexport const ADAPTER_STATUS_CONFIG = {\n  running: { color: 'success', text: '运行中' },\n  stopped: { color: 'default', text: '已停止' },\n  error: { color: 'error', text: '错误' },\n} as const;\n\nexport const HEALTH_STATUS_CONFIG = {\n  healthy: { color: 'success', text: '健康' },\n  degraded: { color: 'warning', text: '降级' },\n  unhealthy: { color: 'error', text: '不健康' },\n  unknown: { color: 'default', text: '未知' },\n} as const;\n\nexport const SYSTEM_HEALTH_CONFIG = {\n  healthy: { color: 'success', text: '系统健康' },\n  degraded: { color: 'warning', text: '系统降级' },\n  unhealthy: { color: 'error', text: '系统异常' },\n  stopped: { color: 'default', text: '系统停止' },\n} as const;\n\n// 时间范围选项\nexport const TIME_RANGE_OPTIONS = [\n  { label: '5分钟', value: '5m' },\n  { label: '15分钟', value: '15m' },\n  { label: '1小时', value: '1h' },\n  { label: '6小时', value: '6h' },\n  { label: '24小时', value: '24h' },\n  { label: '7天', value: '7d' },\n] as const;\n\n// 监控指标类型\nexport type MetricType = 'data_points' | 'throughput' | 'latency' | 'errors' | 'uptime';\n\n// 监控图表数据点\nexport interface MetricDataPoint {\n  timestamp: string;\n  value: number;\n  label?: string;\n}\n\n// 监控图表配置\nexport interface ChartConfig {\n  title: string;\n  type: 'line' | 'bar' | 'area';\n  unit: string;\n  color: string;\n  yAxisName: string;\n}\n\n// 实时监控数据\nexport interface RealtimeMonitoringData {\n  adapters: AdapterStatus[];\n  sinks: SinkStatus[];\n  overview: ConnectionOverview;\n  dataFlow: DataFlowMetrics[];\n  timestamp: string;\n}","import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  Row,\n  Col,\n  Table,\n  Tag,\n  Button,\n  Tabs,\n  Progress,\n  Typography,\n  Tooltip,\n  Modal,\n  Select,\n  Spin,\n  Empty,\n  message,\n  Divider,\n  Space,\n  Alert,\n  Statistic,\n  Badge,\n} from 'antd';\nimport {\n  ReloadOutlined,\n  CheckCircleOutlined,\n  CloseCircleOutlined,\n  MonitorOutlined,\n  ApiOutlined,\n  ThunderboltOutlined,\n  DatabaseOutlined,\n  LineChartOutlined,\n  RestOutlined,\n  BugOutlined,\n  ForkOutlined,\n  WarningOutlined\n} from '@ant-design/icons';\nimport { monitoringService } from '../services/monitoringService';\nimport { useRealtimeData } from '../hooks/useRealTimeData';\nimport DataFlowChart from '../components/charts/DataFlowChart';\nimport type {\n  AdapterStatus,\n  SinkStatus,\n  ConnectionOverview,\n  DataFlowMetrics,\n  AdapterDiagnostics,\n} from '../types/monitoring';\nimport { TIME_RANGE_OPTIONS } from '../types/monitoring';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\nconst MonitoringPage: React.FC = () => {\n  // 状态管理\n  const [loading, setLoading] = useState(true);\n  const [adapters, setAdapters] = useState<AdapterStatus[]>([]);\n  const [sinks, setSinks] = useState<SinkStatus[]>([]);\n  const [overview, setOverview] = useState<ConnectionOverview | null>(null);\n  const [dataFlow, setDataFlow] = useState<DataFlowMetrics[]>([]);\n  const [timeRange, setTimeRange] = useState('1h');\n  const [selectedAdapter, setSelectedAdapter] = useState<string | null>(null);\n  const [diagnostics, setDiagnostics] = useState<AdapterDiagnostics | null>(null);\n  const [diagnosticsVisible, setDiagnosticsVisible] = useState(false);\n  const [activeTab, setActiveTab] = useState('overview');\n\n  // 实时数据\n  const { data: realtimeData, isConnected } = useRealtimeData({\n    autoConnect: true,\n    enableSystemUpdates: true,\n  });\n\n  // 加载数据\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const [statusData, flowData] = await Promise.all([\n        monitoringService.getAdapterStatus(),\n        monitoringService.getDataFlowMetrics({ time_range: timeRange }),\n      ]);\n\n      setAdapters(statusData.adapters);\n      setSinks(statusData.sinks);\n      setOverview(statusData.overview);\n      setDataFlow(flowData.metrics);\n    } catch (error: any) {\n      message.error('加载监控数据失败: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 刷新数据\n  const refreshData = async () => {\n    await loadData();\n    message.success('数据已刷新');\n  };\n\n  // 测试连接\n  const testConnection = async (adapterName: string) => {\n    try {\n      const result = await monitoringService.testAdapterConnection(adapterName);\n      if (result.success) {\n        message.success(`${adapterName} 连接测试成功`);\n      } else {\n        message.error(`${adapterName} 连接测试失败: ${result.error}`);\n      }\n    } catch (error: any) {\n      message.error('连接测试失败: ' + error.message);\n    }\n  };\n\n  // 重启适配器\n  const restartAdapter = async (adapterName: string) => {\n    Modal.confirm({\n      title: '确认重启',\n      content: `确定要重启适配器 \"${adapterName}\" 吗？`,\n      onOk: async () => {\n        try {\n          await monitoringService.restartAdapter(adapterName);\n          message.success('重启请求已提交');\n          setTimeout(loadData, 2000); // 2秒后刷新数据\n        } catch (error: any) {\n          message.error('重启失败: ' + error.message);\n        }\n      },\n    });\n  };\n\n  // 查看诊断信息\n  const viewDiagnostics = async (adapterName: string) => {\n    try {\n      setSelectedAdapter(adapterName);\n      const result = await monitoringService.getAdapterDiagnostics(adapterName);\n      setDiagnostics(result);\n      setDiagnosticsVisible(true);\n    } catch (error: any) {\n      message.error('获取诊断信息失败: ' + error.message);\n    }\n  };\n\n  // 初始加载\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  // 时间范围变化时重新加载数据流\n  useEffect(() => {\n    if (timeRange) {\n      monitoringService.getDataFlowMetrics({ time_range: timeRange })\n        .then(data => setDataFlow(data.metrics))\n        .catch(error => message.error('更新数据流失败: ' + error.message));\n    }\n  }, [timeRange]);\n\n  // 实时数据更新\n  useEffect(() => {\n    if (realtimeData && isConnected) {\n      // 这里可以处理实时数据更新\n      // 比如更新某些实时指标\n    }\n  }, [realtimeData, isConnected]);\n\n  // 获取系统健康状态图标\n  const getSystemHealthIcon = (health: string) => {\n    switch (health) {\n      case 'healthy':\n        return <CheckCircleOutlined style={{ color: '#52c41a' }} />;\n      case 'degraded':\n        return <WarningOutlined style={{ color: '#faad14' }} />;\n      case 'unhealthy':\n        return <CloseCircleOutlined style={{ color: '#f5222d' }} />;\n      default:\n        return <MonitorOutlined style={{ color: '#d9d9d9' }} />;\n    }\n  };\n\n  // 适配器表格列定义\n  const adapterColumns = [\n    {\n      title: '名称',\n      dataIndex: 'name',\n      key: 'name',\n      render: (name: string, record: AdapterStatus) => (\n        <Space>\n          <span style={{ fontSize: '16px' }}>\n            {monitoringService.getAdapterIcon(record.type)}\n          </span>\n          <Text strong>{name}</Text>\n        </Space>\n      ),\n    },\n    {\n      title: '类型',\n      dataIndex: 'type',\n      key: 'type',\n      render: (type: string) => <Tag>{type.toUpperCase()}</Tag>,\n    },\n    {\n      title: '状态',\n      dataIndex: 'status',\n      key: 'status',\n      render: (status: string) => (\n        <Badge\n          status={monitoringService.getStatusColor(status) as any}\n          text={monitoringService.getStatusText(status)}\n        />\n      ),\n    },\n    {\n      title: '健康状态',\n      dataIndex: 'health',\n      key: 'health',\n      render: (health: string, record: AdapterStatus) => (\n        <Tooltip title={record.health_message}>\n          <Tag color={monitoringService.getHealthColor(health)}>\n            {monitoringService.getHealthText(health)}\n          </Tag>\n        </Tooltip>\n      ),\n    },\n    {\n      title: '运行时间',\n      dataIndex: 'connection_uptime',\n      key: 'connection_uptime',\n      render: (uptime: number) => monitoringService.formatUptime(uptime),\n    },\n    {\n      title: '数据点',\n      dataIndex: 'data_points_count',\n      key: 'data_points_count',\n      render: (count: number) => monitoringService.formatNumber(count),\n    },\n    {\n      title: '错误数',\n      dataIndex: 'errors_count',\n      key: 'errors_count',\n      render: (count: number, record: AdapterStatus) => {\n        const errorRate = record.data_points_count > 0 \n          ? (count / record.data_points_count * 100).toFixed(2)\n          : '0';\n        return (\n          <Tooltip title={`错误率: ${errorRate}%`}>\n            <Text type={count > 0 ? 'danger' : 'secondary'}>{count}</Text>\n          </Tooltip>\n        );\n      },\n    },\n    {\n      title: '响应时间',\n      dataIndex: 'response_time_ms',\n      key: 'response_time_ms',\n      render: (time: number) => monitoringService.formatLatency(time),\n    },\n    {\n      title: '操作',\n      key: 'actions',\n      render: (_: any, record: AdapterStatus) => (\n        <Space size=\"small\">\n          <Tooltip title=\"测试连接\">\n            <Button\n              size=\"small\"\n              icon={<ForkOutlined />}\n              onClick={() => testConnection(record.name)}\n              disabled={record.status !== 'running'}\n            />\n          </Tooltip>\n          <Tooltip title=\"诊断\">\n            <Button\n              size=\"small\"\n              icon={<BugOutlined />}\n              onClick={() => viewDiagnostics(record.name)}\n            />\n          </Tooltip>\n          <Tooltip title=\"重启\">\n            <Button\n              size=\"small\"\n              icon={<RestOutlined />}\n              onClick={() => restartAdapter(record.name)}\n              disabled={record.status === 'stopped'}\n              danger\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  // 连接器表格列定义\n  const sinkColumns = [\n    {\n      title: '名称',\n      dataIndex: 'name',\n      key: 'name',\n      render: (name: string, record: SinkStatus) => (\n        <Space>\n          <span style={{ fontSize: '16px' }}>\n            {monitoringService.getSinkIcon(record.type)}\n          </span>\n          <Text strong>{name}</Text>\n        </Space>\n      ),\n    },\n    {\n      title: '类型',\n      dataIndex: 'type',\n      key: 'type',\n      render: (type: string) => <Tag>{type.toUpperCase()}</Tag>,\n    },\n    {\n      title: '状态',\n      dataIndex: 'status',\n      key: 'status',\n      render: (status: string) => (\n        <Badge\n          status={monitoringService.getStatusColor(status) as any}\n          text={monitoringService.getStatusText(status)}\n        />\n      ),\n    },\n    {\n      title: '健康状态',\n      dataIndex: 'health',\n      key: 'health',\n      render: (health: string, record: SinkStatus) => (\n        <Tooltip title={record.health_message}>\n          <Tag color={monitoringService.getHealthColor(health)}>\n            {monitoringService.getHealthText(health)}\n          </Tag>\n        </Tooltip>\n      ),\n    },\n    {\n      title: '运行时间',\n      dataIndex: 'connection_uptime',\n      key: 'connection_uptime',\n      render: (uptime: number) => monitoringService.formatUptime(uptime),\n    },\n    {\n      title: '消息发布',\n      dataIndex: 'messages_published',\n      key: 'messages_published',\n      render: (count: number) => monitoringService.formatNumber(count),\n    },\n    {\n      title: '错误数',\n      dataIndex: 'errors_count',\n      key: 'errors_count',\n      render: (count: number) => (\n        <Text type={count > 0 ? 'danger' : 'secondary'}>{count}</Text>\n      ),\n    },\n    {\n      title: '响应时间',\n      dataIndex: 'response_time_ms',\n      key: 'response_time_ms',\n      render: (time: number) => monitoringService.formatLatency(time),\n    },\n  ];\n\n  // 数据流表格列定义\n  const dataFlowColumns = [\n    {\n      title: '适配器',\n      dataIndex: 'adapter_name',\n      key: 'adapter_name',\n      render: (name: string) => <Text strong>{name}</Text>,\n    },\n    {\n      title: '设备ID',\n      dataIndex: 'device_id',\n      key: 'device_id',\n    },\n    {\n      title: '数据键',\n      dataIndex: 'key',\n      key: 'key',\n    },\n    {\n      title: '数据点/秒',\n      dataIndex: 'data_points_per_sec',\n      key: 'data_points_per_sec',\n      render: (rate: number) => (\n        <Text>{rate.toFixed(1)}</Text>\n      ),\n    },\n    {\n      title: '字节/秒',\n      dataIndex: 'bytes_per_sec',\n      key: 'bytes_per_sec',\n      render: (rate: number) => monitoringService.formatBytes(rate),\n    },\n    {\n      title: '延迟',\n      dataIndex: 'latency_ms',\n      key: 'latency_ms',\n      render: (latency: number) => monitoringService.formatLatency(latency),\n    },\n    {\n      title: '错误率',\n      dataIndex: 'error_rate',\n      key: 'error_rate',\n      render: (rate: number) => (\n        <Text type={rate > 0.05 ? 'danger' : 'secondary'}>\n          {(rate * 100).toFixed(2)}%\n        </Text>\n      ),\n    },\n    {\n      title: '最后数值',\n      dataIndex: 'last_value',\n      key: 'last_value',\n      render: (value: any) => (\n        <Text code style={{ fontSize: '12px' }}>\n          {JSON.stringify(value).substring(0, 20)}\n        </Text>\n      ),\n    },\n  ];\n\n  // Tab项目\n  const tabItems = [\n    {\n      key: 'overview',\n      label: (\n        <span>\n          <MonitorOutlined />\n          系统概览\n        </span>\n      ),\n      children: (\n        <div>\n          {/* 系统概览统计 */}\n          {overview && (\n            <Row gutter={[24, 24]} style={{ marginBottom: 24 }}>\n              <Col xs={24} sm={12} lg={6}>\n                <Card>\n                  <Statistic\n                    title=\"系统健康\"\n                    value={overview.system_health}\n                    prefix={getSystemHealthIcon(overview.system_health)}\n                    valueStyle={{ \n                      color: overview.system_health === 'healthy' ? '#52c41a' : \n                             overview.system_health === 'degraded' ? '#faad14' : '#f5222d'\n                    }}\n                  />\n                </Card>\n              </Col>\n              <Col xs={24} sm={12} lg={6}>\n                <Card>\n                  <Statistic\n                    title=\"活跃连接\"\n                    value={overview.active_connections}\n                    prefix={<ApiOutlined />}\n                    suffix={`/ ${overview.total_adapters + overview.total_sinks}`}\n                    valueStyle={{ color: '#1890ff' }}\n                  />\n                </Card>\n              </Col>\n              <Col xs={24} sm={12} lg={6}>\n                <Card>\n                  <Statistic\n                    title=\"数据点/秒\"\n                    value={overview.total_data_points_per_sec.toFixed(1)}\n                    prefix={<LineChartOutlined />}\n                    valueStyle={{ color: '#722ed1' }}\n                  />\n                </Card>\n              </Col>\n              <Col xs={24} sm={12} lg={6}>\n                <Card>\n                  <Statistic\n                    title=\"错误/秒\"\n                    value={overview.total_errors_per_sec.toFixed(2)}\n                    prefix={<WarningOutlined />}\n                    valueStyle={{ \n                      color: overview.total_errors_per_sec > 0 ? '#f5222d' : '#52c41a' \n                    }}\n                  />\n                </Card>\n              </Col>\n            </Row>\n          )}\n\n          {/* 适配器和连接器状态概览 */}\n          {overview && (\n            <Row gutter={[24, 24]}>\n              <Col xs={24} lg={12}>\n                <Card title=\"适配器状态\" size=\"small\">\n                  <Row gutter={16}>\n                    <Col span={8}>\n                      <Statistic\n                        title=\"总数\"\n                        value={overview.total_adapters}\n                        prefix={<DatabaseOutlined />}\n                      />\n                    </Col>\n                    <Col span={8}>\n                      <Statistic\n                        title=\"运行中\"\n                        value={overview.running_adapters}\n                        valueStyle={{ color: '#1890ff' }}\n                      />\n                    </Col>\n                    <Col span={8}>\n                      <Statistic\n                        title=\"健康\"\n                        value={overview.healthy_adapters}\n                        valueStyle={{ color: '#52c41a' }}\n                      />\n                    </Col>\n                  </Row>\n                  <Divider />\n                  <Progress\n                    percent={overview.total_adapters > 0 ? (overview.healthy_adapters / overview.total_adapters) * 100 : 0}\n                    strokeColor=\"#52c41a\"\n                    format={() => `${overview.healthy_adapters}/${overview.total_adapters} 健康`}\n                  />\n                </Card>\n              </Col>\n              <Col xs={24} lg={12}>\n                <Card title=\"连接器状态\" size=\"small\">\n                  <Row gutter={16}>\n                    <Col span={8}>\n                      <Statistic\n                        title=\"总数\"\n                        value={overview.total_sinks}\n                        prefix={<ThunderboltOutlined />}\n                      />\n                    </Col>\n                    <Col span={8}>\n                      <Statistic\n                        title=\"运行中\"\n                        value={overview.running_sinks}\n                        valueStyle={{ color: '#1890ff' }}\n                      />\n                    </Col>\n                    <Col span={8}>\n                      <Statistic\n                        title=\"健康\"\n                        value={overview.healthy_sinks}\n                        valueStyle={{ color: '#52c41a' }}\n                      />\n                    </Col>\n                  </Row>\n                  <Divider />\n                  <Progress\n                    percent={overview.total_sinks > 0 ? (overview.healthy_sinks / overview.total_sinks) * 100 : 0}\n                    strokeColor=\"#52c41a\"\n                    format={() => `${overview.healthy_sinks}/${overview.total_sinks} 健康`}\n                  />\n                </Card>\n              </Col>\n            </Row>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'adapters',\n      label: (\n        <span>\n          <DatabaseOutlined />\n          适配器监控\n          {adapters.filter(a => a.status === 'error').length > 0 && (\n            <Badge count={adapters.filter(a => a.status === 'error').length} style={{ marginLeft: 8 }} />\n          )}\n        </span>\n      ),\n      children: (\n        <Card>\n          <Table\n            columns={adapterColumns}\n            dataSource={adapters}\n            rowKey=\"name\"\n            loading={loading}\n            pagination={{ pageSize: 10 }}\n            scroll={{ x: 1200 }}\n          />\n        </Card>\n      ),\n    },\n    {\n      key: 'sinks',\n      label: (\n        <span>\n          <ThunderboltOutlined />\n          连接器监控\n          {sinks.filter(s => s.status === 'error').length > 0 && (\n            <Badge count={sinks.filter(s => s.status === 'error').length} style={{ marginLeft: 8 }} />\n          )}\n        </span>\n      ),\n      children: (\n        <Card>\n          <Table\n            columns={sinkColumns}\n            dataSource={sinks}\n            rowKey=\"name\"\n            loading={loading}\n            pagination={{ pageSize: 10 }}\n            scroll={{ x: 1000 }}\n          />\n        </Card>\n      ),\n    },\n    {\n      key: 'dataflow',\n      label: (\n        <span>\n          <LineChartOutlined />\n          数据流监控\n        </span>\n      ),\n      children: (\n        <div>\n          {/* 数据流图表 */}\n          <DataFlowChart height={400} autoRefresh={true} refreshInterval={10000} />\n          \n          {/* 数据流详细表格 */}\n          <Card title=\"数据流详情\" style={{ marginTop: 16 }}>\n            <div style={{ marginBottom: 16 }}>\n              <Space>\n                <Text>时间范围:</Text>\n                <Select\n                  value={timeRange}\n                  onChange={setTimeRange}\n                  style={{ width: 120 }}\n                >\n                  {TIME_RANGE_OPTIONS.map(option => (\n                    <Option key={option.value} value={option.value}>\n                      {option.label}\n                    </Option>\n                  ))}\n                </Select>\n                <Button icon={<ReloadOutlined />} onClick={refreshData}>\n                  刷新\n                </Button>\n              </Space>\n            </div>\n            {dataFlow.length > 0 ? (\n              <Table\n                columns={dataFlowColumns}\n                dataSource={dataFlow}\n                rowKey={record => `${record.adapter_name}-${record.device_id}-${record.key}`}\n                pagination={{ pageSize: 10 }}\n                scroll={{ x: 1000 }}\n              />\n            ) : (\n              <Empty description=\"暂无数据流数据\" />\n            )}\n          </Card>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: 24 }}>\n        <Col>\n          <Title level={2} style={{ margin: 0 }}>\n            <MonitorOutlined /> 连接监控\n          </Title>\n          <Text type=\"secondary\">实时监控适配器和连接器状态</Text>\n        </Col>\n        <Col>\n          <Space>\n            <Badge\n              status={isConnected ? 'success' : 'error'}\n              text={isConnected ? 'WebSocket已连接' : 'WebSocket断开'}\n            />\n            <Button icon={<ReloadOutlined />} onClick={refreshData} loading={loading}>\n              刷新数据\n            </Button>\n          </Space>\n        </Col>\n      </Row>\n\n      {/* 连接状态提示 */}\n      {!isConnected && (\n        <Alert\n          message=\"实时连接断开\"\n          description=\"WebSocket连接已断开，部分实时功能可能不可用。\"\n          type=\"warning\"\n          showIcon\n          closable\n          style={{ marginBottom: 16 }}\n        />\n      )}\n\n      <Tabs\n        activeKey={activeTab}\n        onChange={setActiveTab}\n        items={tabItems}\n        size=\"large\"\n      />\n\n      {/* 诊断信息弹窗 */}\n      <Modal\n        title={`适配器诊断 - ${selectedAdapter}`}\n        open={diagnosticsVisible}\n        onCancel={() => setDiagnosticsVisible(false)}\n        footer={[\n          <Button key=\"close\" onClick={() => setDiagnosticsVisible(false)}>\n            关闭\n          </Button>,\n        ]}\n        width={800}\n      >\n        {diagnostics ? (\n          <div>\n            {/* 连接测试结果 */}\n            {diagnostics.connection_test && (\n              <Card title=\"连接测试\" size=\"small\" style={{ marginBottom: 16 }}>\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                  <div>\n                    <Text strong>状态: </Text>\n                    <Tag color={diagnostics.connection_test.success ? 'success' : 'error'}>\n                      {diagnostics.connection_test.success ? '成功' : '失败'}\n                    </Tag>\n                  </div>\n                  <div>\n                    <Text strong>响应时间: </Text>\n                    <Text>{diagnostics.connection_test.response_time}ms</Text>\n                  </div>\n                  {diagnostics.connection_test.error && (\n                    <div>\n                      <Text strong>错误: </Text>\n                      <Text type=\"danger\">{diagnostics.connection_test.error}</Text>\n                    </div>\n                  )}\n                </Space>\n              </Card>\n            )}\n\n            {/* 健康检查结果 */}\n            {diagnostics.health_checks.length > 0 && (\n              <Card title=\"健康检查\" size=\"small\" style={{ marginBottom: 16 }}>\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                  {diagnostics.health_checks.map((check, index) => (\n                    <div key={index}>\n                      <Space>\n                        <Tag color={check.status === 'pass' ? 'success' : check.status === 'warn' ? 'warning' : 'error'}>\n                          {check.check_name}\n                        </Tag>\n                        <Text>{check.message}</Text>\n                        <Text type=\"secondary\">({check.duration}ms)</Text>\n                      </Space>\n                    </div>\n                  ))}\n                </Space>\n              </Card>\n            )}\n\n            {/* 性能测试结果 */}\n            {diagnostics.performance_test && (\n              <Card title=\"性能测试\" size=\"small\" style={{ marginBottom: 16 }}>\n                <Row gutter={16}>\n                  <Col span={12}>\n                    <Statistic\n                      title=\"吞吐量\"\n                      value={diagnostics.performance_test.throughput_per_sec}\n                      suffix=\"ops/sec\"\n                    />\n                  </Col>\n                  <Col span={12}>\n                    <Statistic\n                      title=\"平均延迟\"\n                      value={diagnostics.performance_test.avg_latency}\n                      suffix=\"ns\"\n                    />\n                  </Col>\n                </Row>\n              </Card>\n            )}\n\n            {/* 优化建议 */}\n            {diagnostics.recommendations.length > 0 && (\n              <Card title=\"优化建议\" size=\"small\">\n                <ul>\n                  {diagnostics.recommendations.map((rec, index) => (\n                    <li key={index}>{rec}</li>\n                  ))}\n                </ul>\n              </Card>\n            )}\n          </div>\n        ) : (\n          <Spin />\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default MonitoringPage;"],"names":["monitoringService","baseUrl","getAdapterStatus","api","get","this","data","getDataFlowMetrics","params","searchParams","URLSearchParams","time_range","append","limit","toString","url","getAdapterDiagnostics","adapterName","encodeURIComponent","testAdapterConnection","post","getAdapterPerformance","period","restartAdapter","formatUptime","seconds","Math","floor","formatBytes","bytes","i","log","parseFloat","pow","toFixed","formatNumber","num","decimals","formatLatency","ms","getStatusColor","status","getHealthColor","health","getStatusText","getHealthText","calculateHealthScore","adapter","score","data_points_count","errors_count","response_time_ms","max","min","getAdapterIcon","type","toLowerCase","getSinkIcon","TIME_RANGE_OPTIONS","value","label","Option","Select","Text","Typography","DataFlowChart","height","autoRefresh","refreshInterval","chartData","setChartData","useState","time","throughput","latency","errorRate","devices","loading","setLoading","timeRange","setTimeRange","chartType","setChartType","setError","throughputChartRef","useRef","latencyChartRef","errorChartRef","deviceChartRef","throughputChart","latencyChart","errorChart","deviceChart","loadData","async","endTime","Date","startTime","setHours","getHours","setDate","getDate","metrics","processedData","processChartData","err","console","error","Error","message","now","timePoints","throughputData","latencyData","errorRateData","getTime","push","toISOString","random","deviceMap","Map","forEach","metric","count","device_id","set","Array","from","entries","map","name","handleResize","current","resize","useEffect","echarts.init","window","addEventListener","removeEventListener","dispose","option","title","text","left","textStyle","fontSize","tooltip","trigger","formatter","xAxis","axisLabel","yAxis","series","smooth","areaStyle","opacity","itemStyle","color","grid","right","top","bottom","setOption","rate","legend","radius","center","avoidLabelOverlap","show","emphasis","fontWeight","updateCharts","interval","setInterval","clearInterval","totalThroughput","reduce","sum","avgLatency","length","avgErrorRate","activeDevices","children","jsx","Card","size","style","marginBottom","jsxs","Row","gutter","align","Col","Space","onChange","width","LineChartOutlined","BarChartOutlined","Button","icon","ReloadOutlined","onClick","xs","sm","Statistic","suffix","valueStyle","lg","ref","Alert","description","showIcon","marginTop","Title","MonitoringPage","adapters","setAdapters","sinks","setSinks","overview","setOverview","dataFlow","setDataFlow","selectedAdapter","setSelectedAdapter","diagnostics","setDiagnostics","diagnosticsVisible","setDiagnosticsVisible","activeTab","setActiveTab","realtimeData","isConnected","useRealtimeData","autoConnect","enableSystemUpdates","statusData","flowData","Promise","all","refreshData","success","then","catch","adapterColumns","dataIndex","key","render","record","strong","Tag","toUpperCase","Badge","Tooltip","health_message","uptime","_","ForkOutlined","result","testConnection","disabled","BugOutlined","viewDiagnostics","RestOutlined","Modal","confirm","content","onOk","setTimeout","danger","sinkColumns","dataFlowColumns","code","stringify","substring","tabItems","MonitorOutlined","system_health","prefix","CheckCircleOutlined","WarningOutlined","CloseCircleOutlined","getSystemHealthIcon","active_connections","ApiOutlined","total_adapters","total_sinks","total_data_points_per_sec","total_errors_per_sec","span","DatabaseOutlined","running_adapters","healthy_adapters","Divider","Progress","percent","strokeColor","format","ThunderboltOutlined","running_sinks","healthy_sinks","filter","a","marginLeft","Table","columns","dataSource","rowKey","pagination","pageSize","scroll","x","s","adapter_name","Empty","justify","level","margin","closable","Tabs","activeKey","items","open","onCancel","footer","connection_test","direction","response_time","health_checks","check","index","check_name","duration","performance_test","throughput_per_sec","avg_latency","recommendations","rec","Spin"],"mappings":"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"}