{"version":3,"file":"Dashboard-C6AofQgs.js","sources":["../../../src/components/charts/RealTimeChart.tsx","../../../src/components/charts/SystemMonitorChart.tsx","../../../src/components/charts/IoTDataChart.tsx","../../../src/pages/Dashboard.tsx"],"sourcesContent":["import React, { useEffect, useRef, useMemo } from 'react';\nimport { Card, Empty, Spin } from 'antd';\nimport * as echarts from 'echarts';\n\nexport interface DataPoint {\n  timestamp: Date | string;\n  value: number;\n  [key: string]: any;\n}\n\nexport interface ChartSeries {\n  name: string;\n  data: DataPoint[];\n  color?: string;\n  type?: 'line' | 'bar' | 'area';\n  smooth?: boolean;\n}\n\nexport interface RealTimeChartProps {\n  title?: string;\n  series: ChartSeries[];\n  height?: number;\n  width?: string;\n  maxDataPoints?: number;\n  refreshInterval?: number;\n  loading?: boolean;\n  showLegend?: boolean;\n  showGrid?: boolean;\n  xAxisLabel?: string;\n  yAxisLabel?: string;\n  timeFormat?: string;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nconst defaultColors = [\n  '#1890ff',\n  '#52c41a',\n  '#faad14',\n  '#f5222d',\n  '#722ed1',\n  '#13c2c2',\n  '#eb2f96',\n  '#fa8c16',\n];\n\nexport const RealTimeChart: React.FC<RealTimeChartProps> = ({\n  title,\n  series,\n  height = 300,\n  width = '100%',\n  maxDataPoints = 50,\n  loading = false,\n  showLegend = true,\n  showGrid = true,\n  xAxisLabel = '时间',\n  yAxisLabel = '数值',\n  timeFormat = 'HH:mm:ss',\n  className,\n  style,\n}) => {\n  const chartRef = useRef<HTMLDivElement>(null);\n  const chartInstance = useRef<echarts.ECharts | null>(null);\n\n  // 准备图表数据\n  const chartData = useMemo(() => {\n    if (!series || series.length === 0) {\n      return null;\n    }\n\n    return series.map((s, index) => {\n      // 限制数据点数量并排序\n      const limitedData = s.data\n        .slice(-maxDataPoints)\n        .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n\n      return {\n        name: s.name,\n        type: s.type === 'area' ? 'line' : (s.type || 'line'),\n        data: limitedData.map(point => [\n          new Date(point.timestamp).getTime(),\n          point.value\n        ]),\n        smooth: s.smooth !== false,\n        lineStyle: {\n          color: s.color || defaultColors[index % defaultColors.length],\n          width: 2,\n        },\n        itemStyle: {\n          color: s.color || defaultColors[index % defaultColors.length],\n        },\n        areaStyle: s.type === 'area' ? {\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n            { offset: 0, color: s.color || defaultColors[index % defaultColors.length] },\n            { offset: 1, color: 'transparent' }\n          ]),\n          opacity: 0.3,\n        } : undefined,\n        symbol: 'circle',\n        symbolSize: 4,\n        showSymbol: false,\n        animation: true,\n        animationDuration: 300,\n      };\n    });\n  }, [series, maxDataPoints]);\n\n  // 初始化图表\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    // 创建图表实例\n    chartInstance.current = echarts.init(chartRef.current);\n\n    // 处理窗口大小变化\n    const handleResize = () => {\n      chartInstance.current?.resize();\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      chartInstance.current?.dispose();\n      chartInstance.current = null;\n    };\n  }, []);\n\n  // 更新图表配置\n  useEffect(() => {\n    if (!chartInstance.current || !chartData) return;\n\n    const option: echarts.EChartsOption = {\n      title: title ? {\n        text: title,\n        left: 'center',\n        textStyle: {\n          fontSize: 14,\n          fontWeight: 'normal',\n        },\n      } : undefined,\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross',\n          label: {\n            backgroundColor: '#6a7985'\n          }\n        },\n        formatter: function (params: any) {\n          if (!Array.isArray(params)) params = [params];\n          \n          const time = new Date(params[0].axisValue).toLocaleTimeString();\n          let content = `时间: ${time}<br/>`;\n          \n          params.forEach((param: any) => {\n            const color = param.color;\n            const value = typeof param.value[1] === 'number' \n              ? param.value[1].toFixed(2) \n              : param.value[1];\n            content += `<span style=\"color:${color}\">●</span> ${param.seriesName}: ${value}<br/>`;\n          });\n          \n          return content;\n        }\n      },\n      legend: showLegend ? {\n        data: series.map(s => s.name),\n        bottom: 0,\n        textStyle: {\n          fontSize: 12,\n        },\n      } : undefined,\n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: showLegend ? '15%' : '8%',\n        containLabel: true,\n        show: showGrid,\n      },\n      xAxis: {\n        type: 'time',\n        name: xAxisLabel,\n        nameLocation: 'middle',\n        nameGap: 25,\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: '#d9d9d9',\n          },\n        },\n        axisTick: {\n          show: true,\n        },\n        axisLabel: {\n          formatter: function (value: number) {\n            return echarts.format.formatTime(timeFormat, value);\n          },\n          fontSize: 10,\n        },\n        splitLine: {\n          show: showGrid,\n          lineStyle: {\n            type: 'dashed',\n            color: '#f0f0f0',\n          },\n        },\n      },\n      yAxis: {\n        type: 'value',\n        name: yAxisLabel,\n        nameLocation: 'middle',\n        nameGap: 40,\n        scale: true,\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: '#d9d9d9',\n          },\n        },\n        axisTick: {\n          show: true,\n        },\n        axisLabel: {\n          fontSize: 10,\n          formatter: function (value: number) {\n            if (Math.abs(value) >= 1000000) {\n              return (value / 1000000).toFixed(1) + 'M';\n            } else if (Math.abs(value) >= 1000) {\n              return (value / 1000).toFixed(1) + 'K';\n            }\n            return value.toFixed(1);\n          },\n        },\n        splitLine: {\n          show: showGrid,\n          lineStyle: {\n            type: 'dashed',\n            color: '#f0f0f0',\n          },\n        },\n      },\n      series: chartData,\n      animation: true,\n      animationDuration: 300,\n      animationEasing: 'cubicOut',\n    };\n\n    chartInstance.current.setOption(option, true);\n  }, [chartData, title, showLegend, showGrid, xAxisLabel, yAxisLabel, timeFormat, series]);\n\n  // 处理空数据状态\n  if (!series || series.length === 0) {\n    return (\n      <Card \n        title={title} \n        className={className} \n        style={{ height, width, ...style }}\n      >\n        <div style={{ \n          height: height - 100, \n          display: 'flex', \n          alignItems: 'center', \n          justifyContent: 'center' \n        }}>\n          <Empty \n            description=\"暂无数据\" \n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          />\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card \n      title={title} \n      className={className} \n      style={{ height, width, ...style }}\n    >\n      <Spin spinning={loading}>\n        <div\n          ref={chartRef}\n          style={{\n            height: title ? height - 100 : height - 50,\n            width: '100%',\n          }}\n        />\n      </Spin>\n    </Card>\n  );\n};","import React, { useMemo } from 'react';\nimport { Row, Col, Card, Statistic, Progress } from 'antd';\nimport { RealTimeChart, ChartSeries } from './RealTimeChart';\nimport { useRealtimeData } from '../../hooks/useRealTimeData';\n\nexport interface SystemMonitorChartProps {\n  height?: number;\n  showDetailedCharts?: boolean;\n}\n\nexport const SystemMonitorChart: React.FC<SystemMonitorChartProps> = ({\n  height = 300,\n  showDetailedCharts = true,\n}) => {\n  const { data, isConnected } = useRealtimeData({\n    enableSystemUpdates: true,\n    maxDataPoints: 50,\n  });\n\n  // 准备实时系统指标数据\n  const systemMetricsHistory = useMemo(() => {\n    if (!data.systemMetrics) return [];\n    \n    const timestamp = new Date();\n    return [{\n      timestamp,\n      cpu: data.systemMetrics.cpu_percent || 0,\n      memory: data.systemMetrics.memory_percent || 0,\n      disk: data.systemMetrics.disk_percent || 0,\n    }];\n  }, [data.systemMetrics]);\n\n  // CPU 使用率图表数据\n  const cpuChartSeries: ChartSeries[] = useMemo(() => [{\n    name: 'CPU 使用率',\n    data: systemMetricsHistory.map(item => ({\n      timestamp: item.timestamp,\n      value: item.cpu,\n    })),\n    color: '#1890ff',\n    type: 'area',\n  }], [systemMetricsHistory]);\n\n  // 内存使用率图表数据\n  const memoryChartSeries: ChartSeries[] = useMemo(() => [{\n    name: '内存使用率',\n    data: systemMetricsHistory.map(item => ({\n      timestamp: item.timestamp,\n      value: item.memory,\n    })),\n    color: '#52c41a',\n    type: 'area',\n  }], [systemMetricsHistory]);\n\n  // 磁盘使用率图表数据\n  const diskChartSeries: ChartSeries[] = useMemo(() => [{\n    name: '磁盘使用率',\n    data: systemMetricsHistory.map(item => ({\n      timestamp: item.timestamp,\n      value: item.disk,\n    })),\n    color: '#faad14',\n    type: 'area',\n  }], [systemMetricsHistory]);\n\n  // 综合系统指标图表\n  const combinedChartSeries: ChartSeries[] = useMemo(() => [\n    {\n      name: 'CPU',\n      data: systemMetricsHistory.map(item => ({\n        timestamp: item.timestamp,\n        value: item.cpu,\n      })),\n      color: '#1890ff',\n      type: 'line',\n    },\n    {\n      name: '内存',\n      data: systemMetricsHistory.map(item => ({\n        timestamp: item.timestamp,\n        value: item.memory,\n      })),\n      color: '#52c41a',\n      type: 'line',\n    },\n    {\n      name: '磁盘',\n      data: systemMetricsHistory.map(item => ({\n        timestamp: item.timestamp,\n        value: item.disk,\n      })),\n      color: '#faad14',\n      type: 'line',\n    },\n  ], [systemMetricsHistory]);\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  return (\n    <div>\n      {/* 系统状态概览 */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n        <Col xs={24} sm={8}>\n          <Card size=\"small\">\n            <Statistic\n              title=\"连接状态\"\n              value={isConnected ? \"已连接\" : \"未连接\"}\n              valueStyle={{ \n                color: isConnected ? '#52c41a' : '#f5222d',\n                fontSize: '16px'\n              }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={8}>\n          <Card size=\"small\">\n            <Statistic\n              title=\"最后更新\"\n              value={data.lastUpdateTime ? data.lastUpdateTime.toLocaleTimeString() : '--'}\n              valueStyle={{ fontSize: '16px' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={8}>\n          <Card size=\"small\">\n            <Statistic\n              title=\"系统状态\"\n              value={data.systemStatus?.status || '--'}\n              valueStyle={{ \n                color: data.systemStatus?.status === 'running' ? '#52c41a' : '#faad14',\n                fontSize: '16px'\n              }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* 当前系统指标 */}\n      {data.systemMetrics && (\n        <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n          <Col xs={24} md={8}>\n            <Card title=\"CPU 使用率\" size=\"small\">\n              <Progress\n                type=\"circle\"\n                percent={Math.round(data.systemMetrics.cpu_percent || 0)}\n                status={data.systemMetrics.cpu_percent > 80 ? 'exception' : 'active'}\n                strokeColor={data.systemMetrics.cpu_percent > 80 ? '#ff4d4f' : '#1890ff'}\n                size={80}\n              />\n            </Card>\n          </Col>\n          <Col xs={24} md={8}>\n            <Card title=\"内存使用率\" size=\"small\">\n              <Progress\n                type=\"circle\"\n                percent={Math.round(data.systemMetrics.memory_percent || 0)}\n                status={data.systemMetrics.memory_percent > 85 ? 'exception' : 'active'}\n                strokeColor={data.systemMetrics.memory_percent > 85 ? '#ff4d4f' : '#52c41a'}\n                size={80}\n              />\n              <div style={{ textAlign: 'center', marginTop: 8, fontSize: '12px', color: '#666' }}>\n                {formatBytes(data.systemMetrics.memory_used || 0)} / {formatBytes(data.systemMetrics.memory_total || 0)}\n              </div>\n            </Card>\n          </Col>\n          <Col xs={24} md={8}>\n            <Card title=\"磁盘使用率\" size=\"small\">\n              <Progress\n                type=\"circle\"\n                percent={Math.round(data.systemMetrics.disk_percent || 0)}\n                status={data.systemMetrics.disk_percent > 90 ? 'exception' : 'active'}\n                strokeColor={data.systemMetrics.disk_percent > 90 ? '#ff4d4f' : '#faad14'}\n                size={80}\n              />\n              <div style={{ textAlign: 'center', marginTop: 8, fontSize: '12px', color: '#666' }}>\n                {formatBytes(data.systemMetrics.disk_used || 0)} / {formatBytes(data.systemMetrics.disk_total || 0)}\n              </div>\n            </Card>\n          </Col>\n        </Row>\n      )}\n\n      {/* 实时图表 */}\n      {showDetailedCharts && (\n        <Row gutter={[16, 16]}>\n          <Col xs={24}>\n            <RealTimeChart\n              title=\"系统资源使用趋势\"\n              series={combinedChartSeries}\n              height={height}\n              yAxisLabel=\"使用率 (%)\"\n              maxDataPoints={50}\n              loading={!isConnected}\n            />\n          </Col>\n          <Col xs={24} lg={8}>\n            <RealTimeChart\n              title=\"CPU 使用率\"\n              series={cpuChartSeries}\n              height={height - 50}\n              yAxisLabel=\"使用率 (%)\"\n              maxDataPoints={30}\n              loading={!isConnected}\n            />\n          </Col>\n          <Col xs={24} lg={8}>\n            <RealTimeChart\n              title=\"内存使用率\"\n              series={memoryChartSeries}\n              height={height - 50}\n              yAxisLabel=\"使用率 (%)\"\n              maxDataPoints={30}\n              loading={!isConnected}\n            />\n          </Col>\n          <Col xs={24} lg={8}>\n            <RealTimeChart\n              title=\"磁盘使用率\"\n              series={diskChartSeries}\n              height={height - 50}\n              yAxisLabel=\"使用率 (%)\"\n              maxDataPoints={30}\n              loading={!isConnected}\n            />\n          </Col>\n        </Row>\n      )}\n\n      {/* 网络和进程信息 */}\n      {data.systemMetrics && (\n        <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n          <Col xs={24} sm={12} lg={6}>\n            <Card size=\"small\">\n              <Statistic\n                title=\"网络接收\"\n                value={formatBytes(data.systemMetrics.network_rx || 0)}\n                valueStyle={{ fontSize: '14px' }}\n              />\n            </Card>\n          </Col>\n          <Col xs={24} sm={12} lg={6}>\n            <Card size=\"small\">\n              <Statistic\n                title=\"网络发送\"\n                value={formatBytes(data.systemMetrics.network_tx || 0)}\n                valueStyle={{ fontSize: '14px' }}\n              />\n            </Card>\n          </Col>\n          <Col xs={24} sm={12} lg={6}>\n            <Card size=\"small\">\n              <Statistic\n                title=\"进程数\"\n                value={data.systemMetrics.process_count || 0}\n                valueStyle={{ fontSize: '14px' }}\n              />\n            </Card>\n          </Col>\n          <Col xs={24} sm={12} lg={6}>\n            <Card size=\"small\">\n              <Statistic\n                title=\"线程数\"\n                value={data.systemMetrics.thread_count || 0}\n                valueStyle={{ fontSize: '14px' }}\n              />\n            </Card>\n          </Col>\n        </Row>\n      )}\n    </div>\n  );\n};","import React, { useMemo, useState } from 'react';\nimport { Row, Col, Card, Select, Table, Tag, Button, Space, Statistic } from 'antd';\nimport { RealTimeChart, ChartSeries } from './RealTimeChart';\nimport { useRealtimeData } from '../../hooks/useRealTimeData';\nimport { ClearOutlined, PauseOutlined, PlayCircleOutlined } from '@ant-design/icons';\n\nconst { Option } = Select;\n\nexport interface IoTDataChartProps {\n  height?: number;\n  showRawData?: boolean;\n  maxChartPoints?: number;\n  maxTableRows?: number;\n}\n\nexport const IoTDataChart: React.FC<IoTDataChartProps> = ({\n  height = 350,\n  showRawData = true,\n  maxChartPoints = 100,\n  maxTableRows = 50,\n}) => {\n  const { data, isConnected, clearData } = useRealtimeData({\n    enableIotData: true,\n    enableSystemUpdates: false,\n    maxDataPoints: maxChartPoints,\n  });\n\n  const [selectedDevice, setSelectedDevice] = useState<string>('all');\n  const [selectedKey, setSelectedKey] = useState<string>('all');\n  const [isPaused, setIsPaused] = useState(false);\n\n  // 提取设备和数据字段\n  const { devices, dataKeys } = useMemo(() => {\n    const deviceSet = new Set<string>();\n    const keySet = new Set<string>();\n\n    data.iotData.forEach(item => {\n      if (item.data?.device_id) {\n        deviceSet.add(String(item.data.device_id));\n      }\n      if (item.data?.key) {\n        keySet.add(String(item.data.key));\n      }\n    });\n\n    return {\n      devices: Array.from(deviceSet).sort(),\n      dataKeys: Array.from(keySet).sort(),\n    };\n  }, [data.iotData]);\n\n  // 过滤数据\n  const filteredData = useMemo(() => {\n    return data.iotData.filter(item => {\n      const deviceMatch = selectedDevice === 'all' || item.data?.device_id === selectedDevice;\n      const keyMatch = selectedKey === 'all' || item.data?.key === selectedKey;\n      return deviceMatch && keyMatch;\n    });\n  }, [data.iotData, selectedDevice, selectedKey]);\n\n  // 准备图表数据\n  const chartSeries: ChartSeries[] = useMemo(() => {\n    const seriesMap = new Map<string, { data: any[], color: string }>();\n    const colors = ['#1890ff', '#52c41a', '#faad14', '#f5222d', '#722ed1', '#13c2c2', '#eb2f96', '#fa8c16'];\n    let colorIndex = 0;\n\n    filteredData.forEach(item => {\n      if (typeof item.data?.value === 'number') {\n        const seriesKey = `${item.data.device_id || 'unknown'}-${item.data.key || 'value'}`;\n        \n        if (!seriesMap.has(seriesKey)) {\n          seriesMap.set(seriesKey, {\n            data: [],\n            color: colors[colorIndex % colors.length],\n          });\n          colorIndex++;\n        }\n\n        seriesMap.get(seriesKey)!.data.push({\n          timestamp: item.timestamp,\n          value: item.data.value,\n        });\n      }\n    });\n\n    return Array.from(seriesMap.entries()).map(([key, series]) => ({\n      name: key,\n      data: series.data.slice(-maxChartPoints),\n      color: series.color,\n      type: 'line' as const,\n      smooth: true,\n    }));\n  }, [filteredData, maxChartPoints]);\n\n  // 统计信息\n  const statistics = useMemo(() => {\n    const now = new Date();\n    const lastMinute = new Date(now.getTime() - 60000);\n    const recentData = filteredData.filter(item => new Date(item.timestamp) > lastMinute);\n    \n    return {\n      totalPoints: filteredData.length,\n      recentPoints: recentData.length,\n      devicesCount: devices.length,\n      dataKeysCount: dataKeys.length,\n    };\n  }, [filteredData, devices.length, dataKeys.length]);\n\n  // 表格列定义\n  const tableColumns = [\n    {\n      title: '时间',\n      dataIndex: 'timestamp',\n      key: 'timestamp',\n      width: 120,\n      render: (time: Date) => time.toLocaleTimeString(),\n    },\n    {\n      title: '设备ID',\n      dataIndex: ['data', 'device_id'],\n      key: 'device_id',\n      width: 120,\n      render: (deviceId: string) => (\n        <Tag color=\"blue\">{deviceId || 'Unknown'}</Tag>\n      ),\n    },\n    {\n      title: '数据字段',\n      dataIndex: ['data', 'key'],\n      key: 'key',\n      width: 100,\n      render: (key: string) => (\n        <Tag color=\"green\">{key || 'value'}</Tag>\n      ),\n    },\n    {\n      title: '数值',\n      dataIndex: ['data', 'value'],\n      key: 'value',\n      width: 100,\n      render: (value: any) => (\n        <span style={{ fontFamily: 'monospace' }}>\n          {typeof value === 'number' ? value.toFixed(2) : String(value)}\n        </span>\n      ),\n    },\n    {\n      title: '主题',\n      dataIndex: ['data', 'subject'],\n      key: 'subject',\n      ellipsis: true,\n      render: (subject: string) => (\n        <span style={{ fontSize: '12px', color: '#666' }}>{subject}</span>\n      ),\n    },\n  ];\n\n  const handleClearData = () => {\n    clearData('iotData');\n  };\n\n  return (\n    <div>\n      {/* 控制面板 */}\n      <Card size=\"small\" style={{ marginBottom: 16 }}>\n        <Row gutter={[16, 16]} align=\"middle\">\n          <Col xs={24} sm={12} md={6}>\n            <span style={{ marginRight: 8 }}>设备:</span>\n            <Select\n              value={selectedDevice}\n              onChange={setSelectedDevice}\n              style={{ width: '100%' }}\n              size=\"small\"\n            >\n              <Option value=\"all\">全部设备</Option>\n              {devices.map(device => (\n                <Option key={device} value={device}>{device}</Option>\n              ))}\n            </Select>\n          </Col>\n          <Col xs={24} sm={12} md={6}>\n            <span style={{ marginRight: 8 }}>字段:</span>\n            <Select\n              value={selectedKey}\n              onChange={setSelectedKey}\n              style={{ width: '100%' }}\n              size=\"small\"\n            >\n              <Option value=\"all\">全部字段</Option>\n              {dataKeys.map(key => (\n                <Option key={key} value={key}>{key}</Option>\n              ))}\n            </Select>\n          </Col>\n          <Col xs={24} sm={12} md={6}>\n            <Space>\n              <Button\n                size=\"small\"\n                icon={isPaused ? <PlayCircleOutlined /> : <PauseOutlined />}\n                onClick={() => setIsPaused(!isPaused)}\n              >\n                {isPaused ? '恢复' : '暂停'}\n              </Button>\n              <Button\n                size=\"small\"\n                icon={<ClearOutlined />}\n                onClick={handleClearData}\n              >\n                清除\n              </Button>\n            </Space>\n          </Col>\n          <Col xs={24} sm={12} md={6}>\n            <span style={{ fontSize: '12px', color: isConnected ? '#52c41a' : '#f5222d' }}>\n              ● {isConnected ? '实时连接' : '连接断开'}\n            </span>\n          </Col>\n        </Row>\n      </Card>\n\n      {/* 统计信息 */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n        <Col xs={12} sm={6}>\n          <Card size=\"small\">\n            <Statistic\n              title=\"总数据点\"\n              value={statistics.totalPoints}\n              valueStyle={{ fontSize: '16px' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={6}>\n          <Card size=\"small\">\n            <Statistic\n              title=\"最近1分钟\"\n              value={statistics.recentPoints}\n              valueStyle={{ fontSize: '16px', color: statistics.recentPoints > 0 ? '#52c41a' : '#666' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={6}>\n          <Card size=\"small\">\n            <Statistic\n              title=\"设备数量\"\n              value={statistics.devicesCount}\n              valueStyle={{ fontSize: '16px' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={6}>\n          <Card size=\"small\">\n            <Statistic\n              title=\"数据字段\"\n              value={statistics.dataKeysCount}\n              valueStyle={{ fontSize: '16px' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* 实时图表 */}\n      <Row gutter={[16, 16]}>\n        <Col xs={24}>\n          <RealTimeChart\n            title=\"IoT 数据流实时监控\"\n            series={chartSeries}\n            height={height}\n            yAxisLabel=\"数值\"\n            maxDataPoints={maxChartPoints}\n            loading={!isConnected}\n            timeFormat=\"HH:mm:ss\"\n          />\n        </Col>\n      </Row>\n\n      {/* 原始数据表格 */}\n      {showRawData && (\n        <Card \n          title=\"原始数据流\" \n          style={{ marginTop: 16 }}\n          extra={\n            <span style={{ fontSize: '12px', color: '#666' }}>\n              显示最近 {Math.min(filteredData.length, maxTableRows)} 条记录\n            </span>\n          }\n        >\n          <Table\n            columns={tableColumns}\n            dataSource={filteredData.slice(-maxTableRows).reverse()}\n            pagination={false}\n            size=\"small\"\n            scroll={{ y: 300 }}\n            rowKey={(record, index) => `${index}-${record.timestamp}`}\n          />\n        </Card>\n      )}\n    </div>\n  );\n};","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  Row,\r\n  Col,\r\n  Typography,\r\n  Spin,\r\n  Tag,\r\n  Button,\r\n  Space,\r\n  Badge,\r\n  Statistic,\r\n  Progress,\r\n  Divider,\r\n  List,\r\n  Alert as AntAlert,\r\n  Tabs\r\n} from 'antd';\r\nimport {\r\n  ReloadOutlined,\r\n  CheckCircleOutlined,\r\n  CloseCircleOutlined,\r\n  MonitorOutlined,\r\n  ApiOutlined,\r\n  ThunderboltOutlined,\r\n  WarningOutlined,\r\n  DashboardOutlined,\r\n  DatabaseOutlined,\r\n  LineChartOutlined\r\n} from '@ant-design/icons';\r\nimport { useAuthStore } from '../store/authStore';\r\nimport { pluginService } from '../services/pluginService';\r\nimport { alertService } from '../services/alertService';\r\nimport { SystemMonitorChart } from '../components/charts/SystemMonitorChart';\r\nimport { IoTDataChart } from '../components/charts/IoTDataChart';\r\nimport { useRealtimeData } from '../hooks/useRealTimeData';\r\nimport type { Plugin } from '../types/plugin';\r\nimport type { Alert } from '../types/alert';\r\n\r\nconst { Title, Text } = Typography;\r\n\r\ninterface SystemStats {\r\n  uptime: string;\r\n  activeDevices: number;\r\n  dataPoints: number;\r\n  errorRate: number;\r\n  cpuUsage: number;\r\n  memoryUsage: number;\r\n}\r\n\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const user = useAuthStore((state) => state.user);\r\n  const [loading, setLoading] = useState(true);\r\n  const [plugins, setPlugins] = useState<Plugin[]>([]);\r\n  const [stats, setStats] = useState<SystemStats>({\r\n    uptime: '0天 0小时 0分钟',\r\n    activeDevices: 0,\r\n    dataPoints: 0,\r\n    errorRate: 0,\r\n    cpuUsage: 0,\r\n    memoryUsage: 0\r\n  });\r\n\r\n  // 使用实时数据Hook\r\n  const { data: realtimeData, isConnected, connectionState, connect } = useRealtimeData({\r\n    autoConnect: true,\r\n    enableSystemUpdates: true,\r\n    enableIotData: true,\r\n    enableRuleEvents: true,\r\n  });\r\n\r\n  // 告警数据\r\n  const [recentAlerts, setRecentAlerts] = useState<Alert[]>([]);\r\n\r\n  const fetchPlugins = async () => {\r\n    try {\r\n      const response = await pluginService.getPlugins({ page: 1, page_size: 50 });\r\n      setPlugins(response.data || []);\r\n    } catch (error) {\r\n      console.error('获取插件列表失败:', error);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    // 从实时数据更新统计信息\r\n    if (realtimeData?.systemStatus && realtimeData?.systemMetrics) {\r\n      const uptime = realtimeData.systemStatus.uptime || 0;\r\n      const days = Math.floor(uptime / 86400);\r\n      const hours = Math.floor((uptime % 86400) / 3600);\r\n      const minutes = Math.floor((uptime % 3600) / 60);\r\n\r\n      setStats({\r\n        uptime: `${days}天 ${hours}小时 ${minutes}分钟`,\r\n        activeDevices: realtimeData.systemStatus.active_plugins || 0,\r\n        dataPoints: realtimeData.iotData?.length || 0,\r\n        errorRate: 0, // 可以从healthCheck中计算\r\n        cpuUsage: realtimeData.systemMetrics.cpu_percent || 0,\r\n        memoryUsage: realtimeData.systemMetrics.memory_percent || 0\r\n      });\r\n    } else {\r\n      // 如果没有实时数据，尝试从API获取基本统计\r\n      try {\r\n        // 这里可以调用系统状态API\r\n        console.log('实时数据不可用，使用默认统计数据');\r\n      } catch (error) {\r\n        console.error('获取系统统计失败:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // 获取告警数据\r\n  const fetchAlerts = async () => {\r\n    try {\r\n      const [alertsResponse, ] = await Promise.all([\r\n        alertService.getAlerts({ page: 1, pageSize: 5 }),\r\n        alertService.getAlertStats(),\r\n      ]);\r\n      setRecentAlerts(alertsResponse.alerts);\r\n      // setAlertStats(statsResponse); // This line is removed\r\n    } catch (error) {\r\n      console.error('获取告警数据失败:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      setLoading(true);\r\n      await Promise.all([fetchPlugins(), fetchStats(), fetchAlerts()]);\r\n      setLoading(false);\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  // 监听实时数据变化\r\n  useEffect(() => {\r\n    fetchStats();\r\n  }, [realtimeData?.systemStatus, realtimeData?.systemMetrics, realtimeData?.iotData]);\r\n\r\n  const getAlertIcon = (level: string) => {\r\n    switch (level) {\r\n      case 'critical':\r\n      case 'error':\r\n        return <CloseCircleOutlined style={{ color: '#f5222d' }} />;\r\n      case 'warning':\r\n        return <WarningOutlined style={{ color: '#faad14' }} />;\r\n      default:\r\n        return <CheckCircleOutlined style={{ color: '#52c41a' }} />;\r\n    }\r\n  };\r\n\r\n  const getAlertColor = (level: string) => {\r\n    switch (level) {\r\n      case 'critical':\r\n      case 'error':\r\n        return 'error';\r\n      case 'warning':\r\n        return 'warning';\r\n      default:\r\n        return 'info';\r\n    }\r\n  };\r\n\r\n  const refreshData = async () => {\r\n    setLoading(true);\r\n    await Promise.all([fetchPlugins(), fetchStats(), fetchAlerts()]);\r\n    if (!isConnected) {\r\n      await connect();\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const tabItems = [\r\n    {\r\n      key: 'overview',\r\n      label: (\r\n        <span>\r\n          <DashboardOutlined />\r\n          系统概览\r\n        </span>\r\n      ),\r\n      children: (\r\n        <Row gutter={[24, 24]}>\r\n          {/* 系统统计卡片 */}\r\n          <Col xs={24} sm={12} lg={6}>\r\n            <Card>\r\n              <Statistic\r\n                title=\"系统运行时间\"\r\n                value={stats.uptime}\r\n                prefix={<ThunderboltOutlined />}\r\n                valueStyle={{ color: '#52c41a' }}\r\n              />\r\n            </Card>\r\n          </Col>\r\n          <Col xs={24} sm={12} lg={6}>\r\n            <Card>\r\n              <Statistic\r\n                title=\"活跃插件\"\r\n                value={stats.activeDevices}\r\n                prefix={<DatabaseOutlined />}\r\n                valueStyle={{ color: '#1890ff' }}\r\n              />\r\n            </Card>\r\n          </Col>\r\n          <Col xs={24} sm={12} lg={6}>\r\n            <Card>\r\n              <Statistic\r\n                title=\"实时数据点\"\r\n                value={stats.dataPoints}\r\n                prefix={<LineChartOutlined />}\r\n                valueStyle={{ color: '#722ed1' }}\r\n              />\r\n            </Card>\r\n          </Col>\r\n          <Col xs={24} sm={12} lg={6}>\r\n            <Card>\r\n              <Statistic\r\n                title=\"连接状态\"\r\n                value={isConnected ? \"已连接\" : \"断开\"}\r\n                prefix={<ApiOutlined />}\r\n                valueStyle={{ color: isConnected ? '#52c41a' : '#f5222d' }}\r\n              />\r\n            </Card>\r\n          </Col>\r\n\r\n          {/* 系统资源使用 */}\r\n          <Col xs={24} md={12}>\r\n            <Card title=\"系统资源\" extra={<Button icon={<ReloadOutlined />} onClick={refreshData} loading={loading} />}>\r\n              <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n                <div>\r\n                  <Text>CPU 使用率</Text>\r\n                  <Progress\r\n                    percent={Math.round(stats.cpuUsage)}\r\n                    status={stats.cpuUsage > 80 ? 'exception' : 'active'}\r\n                    strokeColor={stats.cpuUsage > 80 ? '#f5222d' : '#1890ff'}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Text>内存使用率</Text>\r\n                  <Progress\r\n                    percent={Math.round(stats.memoryUsage)}\r\n                    status={stats.memoryUsage > 85 ? 'exception' : 'active'}\r\n                    strokeColor={stats.memoryUsage > 85 ? '#f5222d' : '#52c41a'}\r\n                  />\r\n                </div>\r\n                <Divider />\r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Statistic\r\n                      title=\"连接状态\"\r\n                      value={connectionState}\r\n                      valueStyle={{ \r\n                        fontSize: '14px',\r\n                        color: isConnected ? '#52c41a' : '#f5222d'\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Statistic\r\n                      title=\"最后更新\"\r\n                      value={realtimeData?.lastUpdateTime?.toLocaleTimeString() || '--'}\r\n                      valueStyle={{ fontSize: '14px' }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </Space>\r\n            </Card>\r\n          </Col>\r\n\r\n          {/* 最近告警 */}\r\n          <Col xs={24} md={12}>\r\n            <Card title=\"最近告警\" extra={<Badge count={recentAlerts.filter(a => a.level === 'error' || a.level === 'critical').length} />}>\r\n              <List\r\n                dataSource={recentAlerts}\r\n                renderItem={(alert) => (\r\n                  <List.Item>\r\n                    <List.Item.Meta\r\n                      avatar={getAlertIcon(alert.level)}\r\n                      title={\r\n                        <Space>\r\n                          <Tag color={getAlertColor(alert.level)}>{alert.level.toUpperCase()}</Tag>\r\n                          <Text>{alert.title || alert.description}</Text>\r\n                        </Space>\r\n                      }\r\n                      description={\r\n                        <Space>\r\n                          <Text type=\"secondary\">{alert.source}</Text>\r\n                          <Text type=\"secondary\">•</Text>\r\n                          <Text type=\"secondary\">{new Date(alert.createdAt).toLocaleString()}</Text>\r\n                        </Space>\r\n                      }\r\n                    />\r\n                  </List.Item>\r\n                )}\r\n              />\r\n            </Card>\r\n          </Col>\r\n\r\n          {/* 插件状态 */}\r\n          <Col xs={24}>\r\n            <Card title=\"插件状态\" loading={loading}>\r\n              <Row gutter={[16, 16]}>\r\n                {plugins.slice(0, 8).map((plugin) => (\r\n                  <Col xs={24} sm={12} md={8} lg={6} key={plugin.id}>\r\n                    <Card size=\"small\">\r\n                      <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n                        <Space>\r\n                          <Badge\r\n                            status={plugin.status === 'running' ? 'success' : 'error'}\r\n                            text={plugin.name}\r\n                          />\r\n                        </Space>\r\n                        <Text type=\"secondary\" style={{ fontSize: '12px' }}>\r\n                          {plugin.type} • v{plugin.version}\r\n                        </Text>\r\n                      </Space>\r\n                    </Card>\r\n                  </Col>\r\n                ))}\r\n              </Row>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      )\r\n    },\r\n    {\r\n      key: 'monitoring',\r\n      label: (\r\n        <span>\r\n          <MonitorOutlined />\r\n          系统监控\r\n        </span>\r\n      ),\r\n      children: <SystemMonitorChart height={350} showDetailedCharts={true} />\r\n    },\r\n    {\r\n      key: 'iot-data',\r\n      label: (\r\n        <span>\r\n          <LineChartOutlined />\r\n          数据流监控\r\n        </span>\r\n      ),\r\n      children: <IoTDataChart height={350} showRawData={true} maxChartPoints={100} />\r\n    }\r\n  ];\r\n\r\n  if (loading && !realtimeData?.lastUpdateTime) {\r\n    return (\r\n      <div style={{ \r\n        display: 'flex', \r\n        justifyContent: 'center', \r\n        alignItems: 'center', \r\n        height: '50vh' \r\n      }}>\r\n        <Spin size=\"large\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: 24 }}>\r\n        <Col>\r\n          <Title level={2} style={{ margin: 0 }}>\r\n            <DashboardOutlined /> 仪表板\r\n          </Title>\r\n          <Text type=\"secondary\">欢迎回来, {user?.username}</Text>\r\n        </Col>\r\n        <Col>\r\n          <Space>\r\n            <Button icon={<ReloadOutlined />} onClick={refreshData} loading={loading}>\r\n              刷新数据\r\n            </Button>\r\n            {!isConnected && (\r\n              <Button type=\"primary\" icon={<ApiOutlined />} onClick={connect}>\r\n                重新连接\r\n              </Button>\r\n            )}\r\n          </Space>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* 连接状态提示 */}\r\n      {!isConnected && (\r\n        <AntAlert\r\n          message=\"实时连接断开\"\r\n          description=\"WebSocket连接已断开，部分实时功能可能不可用。点击重新连接或刷新页面。\"\r\n          type=\"warning\"\r\n          showIcon\r\n          closable\r\n          style={{ marginBottom: 16 }}\r\n        />\r\n      )}\r\n\r\n      <Tabs \r\n        defaultActiveKey=\"overview\" \r\n        items={tabItems}\r\n        size=\"large\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"names":["defaultColors","RealTimeChart","title","series","height","width","maxDataPoints","loading","showLegend","showGrid","xAxisLabel","yAxisLabel","timeFormat","className","style","chartRef","useRef","chartInstance","chartData","useMemo","length","map","s","index","limitedData","data","slice","sort","a","b","Date","timestamp","getTime","name","type","point","value","smooth","lineStyle","color","itemStyle","areaStyle","echarts.graphic.LinearGradient","offset","opacity","symbol","symbolSize","showSymbol","animation","animationDuration","useEffect","current","echarts.init","handleResize","resize","window","addEventListener","removeEventListener","dispose","option","text","left","textStyle","fontSize","fontWeight","tooltip","trigger","axisPointer","label","backgroundColor","formatter","params","Array","isArray","content","axisValue","toLocaleTimeString","forEach","param","toFixed","seriesName","legend","bottom","grid","right","containLabel","show","xAxis","nameLocation","nameGap","axisLine","axisTick","axisLabel","echarts.format.formatTime","splitLine","yAxis","scale","Math","abs","animationEasing","setOption","jsx","Card","children","Spin","spinning","ref","display","alignItems","justifyContent","Empty","description","image","PRESENTED_IMAGE_SIMPLE","SystemMonitorChart","showDetailedCharts","isConnected","useRealtimeData","enableSystemUpdates","systemMetricsHistory","systemMetrics","cpu","cpu_percent","memory","memory_percent","disk","disk_percent","cpuChartSeries","item","memoryChartSeries","diskChartSeries","combinedChartSeries","formatBytes","bytes","i","floor","log","round","pow","jsxs","Row","gutter","marginBottom","Col","xs","sm","size","Statistic","valueStyle","lastUpdateTime","systemStatus","status","md","Progress","percent","strokeColor","textAlign","marginTop","memory_used","memory_total","disk_used","disk_total","lg","network_rx","network_tx","process_count","thread_count","Option","Select","IoTDataChart","showRawData","maxChartPoints","maxTableRows","clearData","enableIotData","selectedDevice","setSelectedDevice","useState","selectedKey","setSelectedKey","isPaused","setIsPaused","devices","dataKeys","deviceSet","Set","keySet","iotData","device_id","add","String","key","from","filteredData","filter","deviceMatch","keyMatch","chartSeries","seriesMap","Map","colors","colorIndex","seriesKey","has","set","get","push","entries","statistics","lastMinute","recentData","totalPoints","recentPoints","devicesCount","dataKeysCount","tableColumns","dataIndex","render","time","deviceId","Tag","fontFamily","ellipsis","subject","align","marginRight","onChange","device","Space","Button","icon","PlayCircleOutlined","PauseOutlined","onClick","ClearOutlined","extra","min","Table","columns","dataSource","reverse","pagination","scroll","y","rowKey","record","Title","Text","Typography","Dashboard","user","useAuthStore","state","setLoading","plugins","setPlugins","stats","setStats","uptime","activeDevices","dataPoints","errorRate","cpuUsage","memoryUsage","realtimeData","connectionState","connect","autoConnect","enableRuleEvents","recentAlerts","setRecentAlerts","fetchPlugins","async","response","pluginService","getPlugins","page","page_size","error","console","fetchStats","days","hours","minutes","active_plugins","fetchAlerts","alertsResponse","Promise","all","alertService","getAlerts","pageSize","getAlertStats","alerts","loadData","getAlertIcon","level","CloseCircleOutlined","WarningOutlined","CheckCircleOutlined","getAlertColor","refreshData","tabItems","DashboardOutlined","prefix","ThunderboltOutlined","DatabaseOutlined","LineChartOutlined","ApiOutlined","ReloadOutlined","direction","Divider","span","Badge","count","List","renderItem","alert","Item","Meta","avatar","toUpperCase","source","createdAt","toLocaleString","plugin","version","id","MonitorOutlined","justify","margin","username","AntAlert","message","showIcon","closable","Tabs","defaultActiveKey","items"],"mappings":"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"}