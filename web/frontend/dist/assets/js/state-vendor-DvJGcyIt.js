import{R as e}from"./react-vendor-XKB30K_c.js";import{bd as t}from"./vendor-CG-KndAb.js";const r={},n=e=>{let t;const n=new Set,o=(e,r)=>{const o="function"==typeof e?e(t):e;if(!Object.is(o,t)){const e=t;t=(null!=r?r:"object"!=typeof o||null===o)?o:Object.assign({},t,o),n.forEach(r=>r(t,e))}},a=()=>t,i={setState:o,getState:a,getInitialState:()=>s,subscribe:e=>(n.add(e),()=>n.delete(e)),destroy:()=>{"production"!==(r?"production":void 0)&&console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."),n.clear()}},s=t=e(o,a,i);return i},o={},{useDebugValue:a}=e,{useSyncExternalStoreWithSelector:i}=t;let s=!1;const l=e=>e;const c=e=>{"production"!==(o?"production":void 0)&&"function"!=typeof e&&console.warn("[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.");const t="function"==typeof e?(e=>e?n(e):n)(e):e,r=(e,r)=>function(e,t=l,r){"production"!==(o?"production":void 0)&&r&&!s&&(console.warn("[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"),s=!0);const n=i(e.subscribe,e.getState,e.getServerState||e.getInitialState,t,r);return a(n),n}(t,e,r);return Object.assign(r,t),r},u=e=>c,d={};function g(e,t){let r;try{r=e()}catch(n){return}return{getItem:e=>{var t;const n=e=>null===e?null:JSON.parse(e,void 0),o=null!=(t=r.getItem(e))?t:null;return o instanceof Promise?o.then(n):n(o)},setItem:(e,t)=>r.setItem(e,JSON.stringify(t,void 0)),removeItem:e=>r.removeItem(e)}}const m=e=>t=>{try{const r=e(t);return r instanceof Promise?r:{then:e=>m(e)(r),catch(e){return this}}}catch(r){return{then(e){return this},catch:e=>m(e)(r)}}},v=(e,t)=>"getStorage"in t||"serialize"in t||"deserialize"in t?("production"!==(d?"production":void 0)&&console.warn("[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead."),((e,t)=>(r,n,o)=>{let a={getStorage:()=>localStorage,serialize:JSON.stringify,deserialize:JSON.parse,partialize:e=>e,version:0,merge:(e,t)=>({...t,...e}),...t},i=!1;const s=new Set,l=new Set;let c;try{c=a.getStorage()}catch(h){}if(!c)return e((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${a.name}', the given storage is currently unavailable.`),r(...e)},n,o);const u=m(a.serialize),d=()=>{const e=a.partialize({...n()});let t;const r=u({state:e,version:a.version}).then(e=>c.setItem(a.name,e)).catch(e=>{t=e});if(t)throw t;return r},g=o.setState;o.setState=(e,t)=>{g(e,t),d()};const v=e((...e)=>{r(...e),d()},n,o);let f;const p=()=>{var e;if(!c)return;i=!1,s.forEach(e=>e(n()));const t=(null==(e=a.onRehydrateStorage)?void 0:e.call(a,n()))||void 0;return m(c.getItem.bind(c))(a.name).then(e=>{if(e)return a.deserialize(e)}).then(e=>{if(e){if("number"!=typeof e.version||e.version===a.version)return e.state;if(a.migrate)return a.migrate(e.state,e.version);console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}}).then(e=>{var t;return f=a.merge(e,null!=(t=n())?t:v),r(f,!0),d()}).then(()=>{null==t||t(f,void 0),i=!0,l.forEach(e=>e(f))}).catch(e=>{null==t||t(void 0,e)})};return o.persist={setOptions:e=>{a={...a,...e},e.getStorage&&(c=e.getStorage())},clearStorage:()=>{null==c||c.removeItem(a.name)},getOptions:()=>a,rehydrate:()=>p(),hasHydrated:()=>i,onHydrate:e=>(s.add(e),()=>{s.delete(e)}),onFinishHydration:e=>(l.add(e),()=>{l.delete(e)})},p(),f||v})(e,t)):((e,t)=>(r,n,o)=>{let a={storage:g(()=>localStorage),partialize:e=>e,version:0,merge:(e,t)=>({...t,...e}),...t},i=!1;const s=new Set,l=new Set;let c=a.storage;if(!c)return e((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${a.name}', the given storage is currently unavailable.`),r(...e)},n,o);const u=()=>{const e=a.partialize({...n()});return c.setItem(a.name,{state:e,version:a.version})},d=o.setState;o.setState=(e,t)=>{d(e,t),u()};const v=e((...e)=>{r(...e),u()},n,o);let f;o.getInitialState=()=>v;const p=()=>{var e,t;if(!c)return;i=!1,s.forEach(e=>{var t;return e(null!=(t=n())?t:v)});const o=(null==(t=a.onRehydrateStorage)?void 0:t.call(a,null!=(e=n())?e:v))||void 0;return m(c.getItem.bind(c))(a.name).then(e=>{if(e){if("number"!=typeof e.version||e.version===a.version)return[!1,e.state];if(a.migrate)return[!0,a.migrate(e.state,e.version)];console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}return[!1,void 0]}).then(e=>{var t;const[o,i]=e;if(f=a.merge(i,null!=(t=n())?t:v),r(f,!0),o)return u()}).then(()=>{null==o||o(f,void 0),f=n(),i=!0,l.forEach(e=>e(f))}).catch(e=>{null==o||o(void 0,e)})};return o.persist={setOptions:e=>{a={...a,...e},e.storage&&(c=e.storage)},clearStorage:()=>{null==c||c.removeItem(a.name)},getOptions:()=>a,rehydrate:()=>p(),hasHydrated:()=>i,onHydrate:e=>(s.add(e),()=>{s.delete(e)}),onFinishHydration:e=>(l.add(e),()=>{l.delete(e)})},a.skipHydration||p(),f||v})(e,t);export{g as a,u as c,v as p};
//# sourceMappingURL=state-vendor-DvJGcyIt.js.map
