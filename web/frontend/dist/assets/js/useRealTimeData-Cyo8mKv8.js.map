{"version":3,"file":"useRealTimeData-Cyo8mKv8.js","sources":["../../../src/services/websocketService.ts","../../../src/hooks/useRealTimeData.ts"],"sourcesContent":["// import { message } from 'antd';\n\nexport interface WebSocketMessage {\n  type: string;\n  data: Record<string, unknown>;\n  timestamp?: number;\n}\n\nexport interface WebSocketCallbacks {\n  onMessage?: (message: WebSocketMessage) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  onError?: (error: Event) => void;\n}\n\nclass WebSocketService {\n  private ws: WebSocket | null = null;\n  private url: string = '';\n  private token: string = '';\n  private callbacks: WebSocketCallbacks = {};\n  private reconnectInterval: number = 5000;\n  private maxReconnectAttempts: number = 10;\n  private reconnectAttempts: number = 0;\n  private isConnecting: boolean = false;\n  private isManuallyDisconnected: boolean = false;\n\n  constructor() {\n    // 从环境变量或默认设置 WebSocket URL\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.host;\n    this.url = `${protocol}//${host}/api/v1/ws/realtime`;\n  }\n\n  /**\n   * 设置认证令牌\n   */\n  setToken(token: string) {\n    this.token = token;\n  }\n\n  /**\n   * 设置回调函数\n   */\n  setCallbacks(callbacks: WebSocketCallbacks) {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * 连接到 WebSocket 服务器\n   */\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.isConnecting || this.isConnected()) {\n        resolve();\n        return;\n      }\n\n      if (!this.token) {\n        reject(new Error('认证令牌未设置'));\n        return;\n      }\n\n      this.isConnecting = true;\n      this.isManuallyDisconnected = false;\n\n      try {\n        // 在 URL 中传递 JWT 令牌（通过查询参数）\n        const urlWithToken = `${this.url}?token=${encodeURIComponent(this.token)}`;\n        this.ws = new WebSocket(urlWithToken);\n\n        this.ws.onopen = () => {\n          console.log('WebSocket 连接已建立');\n          this.isConnecting = false;\n          this.reconnectAttempts = 0;\n          this.callbacks.onConnect?.();\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const message: WebSocketMessage = JSON.parse(event.data);\n            this.handleMessage(message);\n          } catch (error) {\n            console.error('解析 WebSocket 消息失败:', error);\n          }\n        };\n\n        this.ws.onclose = (event) => {\n          console.log('WebSocket 连接已关闭:', event.code, event.reason);\n          this.isConnecting = false;\n          this.ws = null;\n          this.callbacks.onDisconnect?.();\n\n          // 如果不是手动断开，尝试重连\n          if (!this.isManuallyDisconnected && this.reconnectAttempts < this.maxReconnectAttempts) {\n            setTimeout(() => {\n              this.reconnectAttempts++;\n              console.log(`尝试重连 WebSocket (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n              this.connect().catch(console.error);\n            }, this.reconnectInterval);\n          }\n        };\n\n        this.ws.onerror = (error) => {\n          console.error('WebSocket 错误:', error);\n          this.isConnecting = false;\n          this.callbacks.onError?.(error);\n          reject(error);\n        };\n\n      } catch (error) {\n        this.isConnecting = false;\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * 断开 WebSocket 连接\n   */\n  disconnect() {\n    this.isManuallyDisconnected = true;\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  /**\n   * 检查是否已连接\n   */\n  isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n\n  /**\n   * 发送消息到服务器\n   */\n  send(type: string, data: Record<string, unknown>) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const message: WebSocketMessage = {\n        type,\n        data,\n        timestamp: Date.now()\n      };\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected. Cannot send message:', { type, data });\n    }\n  }\n\n  /**\n   * 发送 ping 消息\n   */\n  ping() {\n    this.send('ping', {});\n  }\n\n  /**\n   * 订阅特定类型的数据\n   */\n  subscribe(topics: string[]) {\n    this.send('subscribe', { topics });\n  }\n\n  /**\n   * 取消订阅\n   */\n  unsubscribe(topics: string[]) {\n    this.send('unsubscribe', { topics });\n  }\n\n  /**\n   * 处理接收到的消息\n   */\n  private handleMessage(message: WebSocketMessage) {\n    console.log('收到 WebSocket 消息:', message);\n\n    // 处理特殊消息类型\n    switch (message.type) {\n      case 'welcome':\n        console.log('收到欢迎消息:', message.data);\n        break;\n      case 'pong':\n        console.log('收到 pong 响应');\n        break;\n      case 'error':\n        console.error('服务器错误:', message.data);\n        // message.error(message.data.message || '服务器错误');\n        break;\n      default:\n        // 调用用户定义的消息处理器\n        this.callbacks.onMessage?.(message);\n        break;\n    }\n  }\n\n  /**\n   * 获取连接状态\n   */\n  getConnectionState(): string {\n    if (!this.ws) return 'DISCONNECTED';\n    \n    switch (this.ws.readyState) {\n      case WebSocket.CONNECTING:\n        return 'CONNECTING';\n      case WebSocket.OPEN:\n        return 'CONNECTED';\n      case WebSocket.CLOSING:\n        return 'CLOSING';\n      case WebSocket.CLOSED:\n        return 'DISCONNECTED';\n      default:\n        return 'UNKNOWN';\n    }\n  }\n}\n\n// 创建单例实例\nexport const webSocketService = new WebSocketService();","import { useEffect, useState, useCallback, useRef } from 'react';\nimport { webSocketService, WebSocketMessage } from '../services/websocketService';\nimport { useAuthStore } from '../store/authStore';\nimport type { SystemStatus, SystemMetrics, HealthCheck } from '../types/system';\nimport type { Plugin } from '../types/plugin';\n\nexport interface IoTDataPoint {\n  timestamp: string;\n  device_id: string;\n  data: Record<string, string | number | boolean>;\n}\n\nexport interface RuleEvent {\n  id: string;\n  rule_id: string;\n  rule_name: string;\n  level: string;\n  message: string;\n  timestamp: string;\n  data: Record<string, string | number | boolean>;\n}\n\nexport interface SystemEvent {\n  id: string;\n  type: string;\n  level: string;\n  message: string;\n  timestamp: string;\n  source: string;\n  data: Record<string, string | number | boolean>;\n}\n\nexport interface RealtimeDataState {\n  systemStatus: SystemStatus | null;\n  systemMetrics: SystemMetrics | null;\n  pluginStatus: Plugin[] | null;\n  healthCheck: HealthCheck | null;\n  iotData: IoTDataPoint[];\n  ruleEvents: RuleEvent[];\n  systemEvents: SystemEvent[];\n  connectionState: string;\n  lastUpdateTime: Date | null;\n}\n\nexport interface UseRealtimeDataOptions {\n  autoConnect?: boolean;\n  enableSystemUpdates?: boolean;\n  enableIotData?: boolean;\n  enableRuleEvents?: boolean;\n  enableSystemEvents?: boolean;\n  maxDataPoints?: number;\n}\n\nconst defaultOptions: UseRealtimeDataOptions = {\n  autoConnect: true,\n  enableSystemUpdates: true,\n  enableIotData: true,\n  enableRuleEvents: true,\n  enableSystemEvents: true,\n  maxDataPoints: 100,\n};\n\nexport const useRealtimeData = (options: UseRealtimeDataOptions = {}) => {\n  const opts = { ...defaultOptions, ...options };\n  const token = useAuthStore((state) => state.accessToken);\n  const [data, setData] = useState<RealtimeDataState>({\n    systemStatus: null,\n    systemMetrics: null,\n    pluginStatus: null,\n    healthCheck: null,\n    iotData: [],\n    ruleEvents: [],\n    systemEvents: [],\n    connectionState: 'DISCONNECTED',\n    lastUpdateTime: null,\n  });\n\n  const dataRef = useRef(data);\n  dataRef.current = data;\n\n  // 处理 WebSocket 消息\n  const handleMessage = useCallback((message: WebSocketMessage) => {\n    const timestamp = new Date();\n    \n    setData(prevData => {\n      const newData = { ...prevData, lastUpdateTime: timestamp };\n      \n      switch (message.type) {\n        case 'system_status':\n        case 'system_status_update':\n          if (opts.enableSystemUpdates) {\n            newData.systemStatus = message.data as unknown as SystemStatus;\n          }\n          break;\n\n        case 'system_metrics':\n        case 'system_metrics_update':\n          if (opts.enableSystemUpdates) {\n            newData.systemMetrics = message.data as unknown as SystemMetrics;\n          }\n          break;\n\n        case 'plugin_status':\n          if (opts.enableSystemUpdates) {\n            newData.pluginStatus = message.data as unknown as Plugin[];\n          }\n          break;\n\n        case 'health_check':\n          if (opts.enableSystemUpdates) {\n            newData.healthCheck = message.data as unknown as HealthCheck;\n          }\n          break;\n\n        case 'iot_data':\n          if (opts.enableIotData) {\n            const iotDataPoint: IoTDataPoint = {\n              ...(message.data as Omit<IoTDataPoint, 'timestamp'>),\n              timestamp: timestamp.toISOString()\n            };\n            const newIotData = [...prevData.iotData, iotDataPoint];\n            // 限制数据点数量\n            if (newIotData.length > (opts.maxDataPoints || 100)) {\n              newIotData.splice(0, newIotData.length - (opts.maxDataPoints || 100));\n            }\n            newData.iotData = newIotData;\n          }\n          break;\n\n        case 'rule_event':\n          if (opts.enableRuleEvents) {\n            const ruleEvent: RuleEvent = {\n              ...(message.data as Omit<RuleEvent, 'timestamp'>),\n              timestamp: timestamp.toISOString()\n            };\n            const newRuleEvents = [...prevData.ruleEvents, ruleEvent];\n            if (newRuleEvents.length > (opts.maxDataPoints || 100)) {\n              newRuleEvents.splice(0, newRuleEvents.length - (opts.maxDataPoints || 100));\n            }\n            newData.ruleEvents = newRuleEvents;\n          }\n          break;\n\n        case 'system_event':\n          if (opts.enableSystemEvents) {\n            const systemEvent: SystemEvent = {\n              ...(message.data as Omit<SystemEvent, 'timestamp'>),\n              timestamp: timestamp.toISOString()\n            };\n            const newSystemEvents = [...prevData.systemEvents, systemEvent];\n            if (newSystemEvents.length > (opts.maxDataPoints || 100)) {\n              newSystemEvents.splice(0, newSystemEvents.length - (opts.maxDataPoints || 100));\n            }\n            newData.systemEvents = newSystemEvents;\n          }\n          break;\n\n        default:\n          console.log('收到未处理的消息类型:', message.type);\n          break;\n      }\n\n      return newData;\n    });\n  }, [opts]);\n\n  // 处理连接状态变化\n  const handleConnect = useCallback(() => {\n    console.log('WebSocket 已连接');\n    setData(prev => ({ ...prev, connectionState: 'CONNECTED' }));\n  }, []);\n\n  const handleDisconnect = useCallback(() => {\n    console.log('WebSocket 已断开');\n    setData(prev => ({ ...prev, connectionState: 'DISCONNECTED' }));\n  }, []);\n\n  const handleError = useCallback((error: Event) => {\n    console.error('WebSocket 错误:', error);\n    setData(prev => ({ ...prev, connectionState: 'ERROR' }));\n  }, []);\n\n  // 连接管理函数\n  const connect = useCallback(async () => {\n    if (!token) {\n      console.warn('无法连接 WebSocket: 缺少认证令牌');\n      return;\n    }\n\n    try {\n      webSocketService.setToken(token);\n      webSocketService.setCallbacks({\n        onMessage: handleMessage,\n        onConnect: handleConnect,\n        onDisconnect: handleDisconnect,\n        onError: handleError,\n      });\n      \n      await webSocketService.connect();\n      \n      // 订阅感兴趣的数据类型\n      const topics = [];\n      if (opts.enableSystemUpdates) {\n        topics.push('system_status', 'system_metrics', 'plugin_status', 'health_check');\n      }\n      if (opts.enableIotData) {\n        topics.push('iot_data');\n      }\n      if (opts.enableRuleEvents) {\n        topics.push('rule_event');\n      }\n      if (opts.enableSystemEvents) {\n        topics.push('system_event');\n      }\n      \n      if (topics.length > 0) {\n        webSocketService.subscribe(topics);\n      }\n      \n    } catch (error) {\n      console.error('连接 WebSocket 失败:', error);\n      setData(prev => ({ ...prev, connectionState: 'ERROR' }));\n    }\n  }, [token, handleMessage, handleConnect, handleDisconnect, handleError, opts]);\n\n  const disconnect = useCallback(() => {\n    webSocketService.disconnect();\n    setData(prev => ({ ...prev, connectionState: 'DISCONNECTED' }));\n  }, []);\n\n  const reconnect = useCallback(() => {\n    disconnect();\n    setTimeout(connect, 1000);\n  }, [connect, disconnect]);\n\n  // 发送消息\n  const sendMessage = useCallback((type: string, messageData: Record<string, unknown>) => {\n    webSocketService.send(type, messageData);\n  }, []);\n\n  const ping = useCallback(() => {\n    webSocketService.ping();\n  }, []);\n\n  // 清除数据\n  const clearData = useCallback((dataType?: keyof RealtimeDataState) => {\n    setData(prev => {\n      if (dataType) {\n        const newData = { ...prev };\n        if (dataType === 'iotData' || dataType === 'ruleEvents' || dataType === 'systemEvents') {\n          (newData[dataType] as any[]) = [];\n        } else {\n          (newData[dataType] as any) = null;\n        }\n        return newData;\n      } else {\n        return {\n          ...prev,\n          systemStatus: null,\n          systemMetrics: null,\n          pluginStatus: null,\n          healthCheck: null,\n          iotData: [],\n          ruleEvents: [],\n          systemEvents: [],\n        };\n      }\n    });\n  }, []);\n\n  // 自动连接和清理\n  useEffect(() => {\n    if (opts.autoConnect && token) {\n      connect();\n    }\n\n    return () => {\n      if (webSocketService.isConnected()) {\n        webSocketService.disconnect();\n      }\n    };\n  }, [token, opts.autoConnect, connect]);\n\n  // 更新连接状态\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const currentState = webSocketService.getConnectionState();\n      setData(prev => {\n        if (prev.connectionState !== currentState) {\n          return { ...prev, connectionState: currentState };\n        }\n        return prev;\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return {\n    data,\n    isConnected: data.connectionState === 'CONNECTED',\n    isConnecting: data.connectionState === 'CONNECTING',\n    connectionState: data.connectionState,\n    connect,\n    disconnect,\n    reconnect,\n    sendMessage,\n    ping,\n    clearData,\n  };\n};"],"names":["webSocketService","ws","url","token","callbacks","reconnectInterval","maxReconnectAttempts","reconnectAttempts","isConnecting","isManuallyDisconnected","constructor","protocol","window","location","host","this","setToken","setCallbacks","connect","Promise","resolve","reject","isConnected","urlWithToken","encodeURIComponent","WebSocket","onopen","console","log","onConnect","onmessage","event","message","JSON","parse","data","handleMessage","error","onclose","code","reason","onDisconnect","setTimeout","catch","onerror","onError","Error","disconnect","close","readyState","OPEN","send","type","timestamp","Date","now","stringify","warn","ping","subscribe","topics","unsubscribe","onMessage","getConnectionState","CONNECTING","CLOSING","CLOSED","defaultOptions","autoConnect","enableSystemUpdates","enableIotData","enableRuleEvents","enableSystemEvents","maxDataPoints","useRealtimeData","options","opts","useAuthStore","state","accessToken","setData","useState","systemStatus","systemMetrics","pluginStatus","healthCheck","iotData","ruleEvents","systemEvents","connectionState","lastUpdateTime","useRef","current","useCallback","prevData","newData","iotDataPoint","toISOString","newIotData","length","splice","ruleEvent","newRuleEvents","systemEvent","newSystemEvents","handleConnect","prev","handleDisconnect","handleError","async","push","reconnect","sendMessage","messageData","clearData","dataType","useEffect","interval","setInterval","currentState","clearInterval"],"mappings":"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"}