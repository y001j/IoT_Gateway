class l{ws=null;url="";token="";callbacks={};reconnectInterval=15e3;maxReconnectAttempts=3;reconnectAttempts=0;isConnecting=!1;isManuallyDisconnected=!1;lastDisconnectReason="";connectionId="";lastConnectAttempt=0;minConnectInterval=5e3;reconnectTimer=null;constructor(){const t=window.location.protocol==="https:"?"wss:":"ws:",n=!1;{const s=window.location.host;this.url=`${t}//${s}/api/v1/ws/realtime`}this.connectionId=this.generateConnectionId(),console.log("🔧 WebSocket服务初始化",{url:this.url,connectionId:this.connectionId,isDev:n,wsBaseUrl:void 0,debugWs:void 0})}generateConnectionId(){return`ws_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}setToken(t){console.log("🔑 设置WebSocket认证令牌，长度:",t?t.length:0),this.token=t}setCallbacks(t){this.callbacks={...this.callbacks,...t}}async testWebSocketEndpoint(){try{const t=this.url.replace("ws:","http:").replace("wss:","https:");console.log("🧪 测试WebSocket端点可达性:",t);const n=await fetch(t.split("?")[0],{method:"GET",headers:{Connection:"upgrade"}});return console.log("🧪 WebSocket端点测试结果:",n.status,n.statusText),!0}catch(t){return console.error("🧪 WebSocket端点不可达:",t),!1}}connect(){return new Promise(async(t,n)=>{const s=Date.now();if(this.isConnecting){console.log("⏸️ WebSocket连接正在进行中，跳过重复连接请求"),t();return}if(this.isConnected()){console.log("✅ WebSocket已连接，跳过连接请求"),t();return}if(s-this.lastConnectAttempt<this.minConnectInterval){const e=this.minConnectInterval-(s-this.lastConnectAttempt);console.log(`⏰ 连接间隔限制，需等待 ${e}ms`),setTimeout(()=>{this.connect().then(t).catch(n)},e);return}if(!this.token){const e=new Error("认证令牌未设置");console.error("❌ WebSocket连接失败:",e.message),n(e);return}if(this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.isConnecting=!0,this.isManuallyDisconnected=!1,this.lastConnectAttempt=s,console.log(`🔌 开始建立WebSocket连接... [${this.connectionId}]`),!await this.testWebSocketEndpoint()){const e=new Error(`WebSocket端点不可达: ${this.url}`);console.error("❌ WebSocket端点测试失败"),this.isConnecting=!1,n(e);return}try{const e=`${this.url}?token=${encodeURIComponent(this.token)}`;console.log("🌐 连接WebSocket URL:",e.replace(/token=[^&]+/,"token=***")),this.ws=new WebSocket(e),this.ws.onopen=()=>{console.log(`✅ WebSocket连接已建立 [${this.connectionId}]`),this.isConnecting=!1,this.reconnectAttempts=0,this.lastDisconnectReason="",this.callbacks.onConnect?.(),t()},this.ws.onmessage=o=>{try{const c=JSON.parse(o.data);console.log(`📨 收到WebSocket消息: ${c.type} [${this.connectionId}]`),this.handleMessage(c)}catch(c){console.error(`❌ 解析WebSocket消息失败 [${this.connectionId}]:`,c,"原始数据:",o.data)}},this.ws.onclose=o=>{if(this.lastDisconnectReason=`Code: ${o.code}, Reason: ${o.reason||"未知"}`,console.log(`🔌 WebSocket连接已关闭 [${this.connectionId}]:`,this.lastDisconnectReason),this.isConnecting=!1,this.ws=null,this.callbacks.onDisconnect?.(),!this.isManuallyDisconnected&&this.reconnectAttempts<this.maxReconnectAttempts){const c=this.reconnectInterval*Math.pow(2,this.reconnectAttempts);console.log(`⏰ 将在${c/1e3}秒后尝试重连 (${this.reconnectAttempts+1}/${this.maxReconnectAttempts}) [${this.connectionId}]`),this.reconnectTimer=setTimeout(()=>{!this.isManuallyDisconnected&&!this.isConnected()&&(this.reconnectAttempts++,console.log(`🔄 尝试重连WebSocket (${this.reconnectAttempts}/${this.maxReconnectAttempts}) [${this.connectionId}]`),this.connect().catch(r=>{console.error(`❌ 重连失败 [${this.connectionId}]:`,r)}))},c)}else this.reconnectAttempts>=this.maxReconnectAttempts&&console.error(`❌ 已达到最大重连次数，停止重连 [${this.connectionId}]`)},this.ws.onerror=o=>{console.error(`❌ WebSocket连接错误 [${this.connectionId}]:`,{error:o,url:this.url,token:this.token?`${this.token.substring(0,20)}...`:"null",readyState:this.ws?.readyState,timestamp:new Date().toISOString()}),this.isConnecting=!1,this.callbacks.onError?.(o),n(new Error(`WebSocket连接失败: 无法连接到 ${this.url}`))}}catch(e){console.error(`❌ 创建WebSocket连接失败 [${this.connectionId}]:`,e),this.isConnecting=!1,n(e)}})}disconnect(){console.log(`🔌 手动断开WebSocket连接 [${this.connectionId}]`),this.isManuallyDisconnected=!0,this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.ws&&(this.ws.close(1e3,"用户主动断开"),this.ws=null),this.isConnecting=!1}resetReconnectAttempts(){console.log(`🔄 重置重连计数器 [${this.connectionId}]`),this.reconnectAttempts=0}isConnected(){return this.ws!==null&&this.ws.readyState===WebSocket.OPEN}send(t,n){if(!this.isConnected()){console.warn(`⚠️ WebSocket未连接，无法发送消息 [${this.connectionId}]:`,t);return}const s={type:t,data:n,timestamp:Date.now()};try{this.ws.send(JSON.stringify(s)),console.log(`📤 发送WebSocket消息: ${t} [${this.connectionId}]`)}catch(i){console.error(`❌ 发送WebSocket消息失败 [${this.connectionId}]:`,i)}}ping(){this.send("ping",{})}subscribe(t){this.send("subscribe",{topics:t})}unsubscribe(t){this.send("unsubscribe",{topics:t})}handleMessage(t){if(t.type==="pong"){console.log(`💓 收到心跳响应 [${this.connectionId}]`);return}if(t.type==="welcome"){console.log(`👋 收到欢迎消息 [${this.connectionId}]:`,t.data);return}t.type==="initial_data"&&console.log(`📊 收到初始数据 [${this.connectionId}]`),this.callbacks.onMessage&&this.callbacks.onMessage(t)}getConnectionState(){return this.isConnecting?"CONNECTING":this.isConnected()?"CONNECTED":(this.isManuallyDisconnected,"DISCONNECTED")}getConnectionInfo(){return{id:this.connectionId,state:this.getConnectionState(),attempts:this.reconnectAttempts}}getLastDisconnectReason(){return this.lastDisconnectReason}getReconnectInfo(){return{attempts:this.reconnectAttempts,maxAttempts:this.maxReconnectAttempts,interval:this.reconnectInterval}}}const h=new l;export{l as WebSocketService,h as webSocketService};
