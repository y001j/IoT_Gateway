import{c as o,b as U}from"./index-BEjgWUn2.js";import{a as l}from"./antd-BFy_CllK.js";import{WebSocketService as R}from"./websocketService-DUqqsEfN.js";class T{baseUrl="/alerts";async getAlerts(e){const n=new URLSearchParams({page:e.page.toString(),page_size:e.pageSize.toString()});e.level&&n.append("level",e.level),e.status&&n.append("status",e.status),e.source&&n.append("source",e.source),e.search&&n.append("search",e.search),e.startTime&&n.append("start_time",e.startTime.toISOString()),e.endTime&&n.append("end_time",e.endTime.toISOString());try{const a=`${this.baseUrl}?${n}`;console.log("📡 发送告警列表请求:",a),console.log("🌐 API基础URL:",o.defaults.baseURL),console.log("🔑 当前认证状态:",!!o.defaults.headers.common?.Authorization);const k=Date.now();console.log("⏰ 请求开始:",new Date().toISOString());const c=await o.get(a),S=Date.now()-k;console.log("⏰ 请求完成，耗时:",S,"ms"),console.log("✅ 告警列表响应状态:",c.status),console.log("✅ 告警列表响应头:",c.headers),console.log("✅ 告警列表响应数据:",c.data);const{alerts:i,...v}=c.data.data;return{alerts:i.map(f=>({...f,createdAt:new Date(f.created_at||f.createdAt||""),updatedAt:new Date(f.updated_at||f.updatedAt||""),acknowledgedAt:f.acknowledged_at?new Date(f.acknowledged_at):void 0,resolvedAt:f.resolved_at?new Date(f.resolved_at):void 0})),...v}}catch(a){throw console.error("❌ 告警列表请求失败 - 完整错误信息:",{message:a.message,code:a.code,name:a.name,status:a.response?.status,statusText:a.response?.statusText,data:a.response?.data,headers:a.response?.headers,config:{url:a.config?.url,method:a.config?.method,baseURL:a.config?.baseURL,timeout:a.config?.timeout,headers:a.config?.headers},request:{readyState:a.request?.readyState,status:a.request?.status,statusText:a.request?.statusText,responseURL:a.request?.responseURL}}),a}}async getAlert(e){const a=(await o.get(`${this.baseUrl}/${e}`)).data.data;return{...a,createdAt:new Date(a.created_at||a.createdAt||""),updatedAt:new Date(a.updated_at||a.updatedAt||""),acknowledgedAt:a.acknowledged_at?new Date(a.acknowledged_at):void 0,resolvedAt:a.resolved_at?new Date(a.resolved_at):void 0}}async createAlert(e){return(await o.post(this.baseUrl,e)).data.data}async updateAlert(e,n){return(await o.put(`${this.baseUrl}/${e}`,n)).data.data}async deleteAlert(e){await o.delete(`${this.baseUrl}/${e}`)}async acknowledgeAlert(e,n){await o.post(`${this.baseUrl}/${e}/acknowledge`,{comment:n})}async resolveAlert(e,n){await o.post(`${this.baseUrl}/${e}/resolve`,{comment:n})}async getAlertStats(){try{console.log("📡 发送告警统计请求:",`${this.baseUrl}/stats`);const e=await o.get(`${this.baseUrl}/stats`);return console.log("✅ 告警统计响应:",e.data),e.data.data}catch(e){throw console.error("❌ 告警统计请求失败:",e),e}}async getAlertRules(){try{console.log("📡 发送告警规则请求:",`${this.baseUrl}/rules`);const e=await o.get(`${this.baseUrl}/rules`);return console.log("✅ 告警规则响应:",e.data),e.data.data}catch(e){throw console.error("❌ 告警规则请求失败:",e),e}}async createAlertRule(e){return(await o.post(`${this.baseUrl}/rules`,e)).data.data}async updateAlertRule(e,n){return(await o.put(`${this.baseUrl}/rules/${e}`,n)).data.data}async deleteAlertRule(e){await o.delete(`${this.baseUrl}/rules/${e}`)}async testAlertRule(e,n){return(await o.post(`${this.baseUrl}/rules/${e}/test`,{data:n})).data.data}async getNotificationChannels(){try{console.log("📡 发送通知渠道请求:",`${this.baseUrl}/channels`);const e=await o.get(`${this.baseUrl}/channels`);return console.log("✅ 通知渠道响应:",e.data),e.data.data}catch(e){throw console.error("❌ 通知渠道请求失败:",e),e}}async createNotificationChannel(e){return(await o.post(`${this.baseUrl}/channels`,e)).data.data}async updateNotificationChannel(e,n){return(await o.put(`${this.baseUrl}/channels/${e}`,n)).data.data}async deleteNotificationChannel(e){await o.delete(`${this.baseUrl}/channels/${e}`)}async testNotificationChannel(e){await o.post(`${this.baseUrl}/channels/${e}/test`)}getAlertLevelColor(e){switch(e){case"info":return"blue";case"warning":return"orange";case"error":return"red";case"critical":return"red";default:return"default"}}getAlertStatusColor(e){switch(e){case"active":return"red";case"acknowledged":return"orange";case"resolved":return"green";default:return"default"}}getAlertLevelText(e){switch(e){case"info":return"信息";case"warning":return"警告";case"error":return"错误";case"critical":return"严重";default:return e}}getAlertStatusText(e){switch(e){case"active":return"活跃";case"acknowledged":return"已确认";case"resolved":return"已解决";default:return e}}formatAlertData(e){try{return JSON.stringify(e,null,2)}catch{return String(e)}}}const N=new T;let A=null,m={iotData:[],systemStatus:null,systemMetrics:null,systemMetricsHistory:[],alerts:[],connectionState:"DISCONNECTED",reconnectInfo:{attempts:0,maxAttempts:3,interval:15e3},lastDisconnectReason:"",connectionInfo:{id:"",state:"DISCONNECTED",attempts:0}};const D=new Set,C=h=>{m=h(m),D.forEach(e=>e(m))},j=()=>{const[h,e]=l.useState(m),[n,a]=l.useState(!1),k=l.useRef(null),c=l.useRef(!0),S=l.useRef(0);l.useEffect(()=>{c.current=!0;const t=s=>{c.current&&e(s)};return D.add(t),()=>{c.current=!1,D.delete(t)}},[]);const i=l.useCallback(()=>(A||(console.log("🏗️ 创建全局 WebSocket 服务实例"),A=new R),A),[]),v=l.useCallback(t=>{c.current&&(console.log("📨 处理实时数据消息:",t.type,t.data),console.log("📨 完整消息对象:",t),C(s=>{const r={...s};switch(t.type){case"iot_data":console.log("🔍 收到增强IoT数据:",t.data),console.log("🔍 message.data.subject:",t.data.subject),console.log("🔍 message.data.data:",t.data.data);const u=t.data.data||{};console.log("🔍 提取的enhancedData:",u),(!u.device_id||!u.key)&&console.warn("⚠️ 数据缺少必要字段:",{device_id:u.device_id,key:u.key,originalData:t.data});const b={timestamp:new Date(t.timestamp||Date.now()),subject:t.data.subject||"",data:{device_id:u.device_id,key:u.key,value:u.value,data_type:u.data_type||"unknown",derived_values:u.derived_values||{},...u},raw_message:t.data};console.log("🔍 处理后的增强IoT数据点:",b),console.log("📊 数据类型:",b.data.data_type),console.log("📈 派生值:",b.data.derived_values);const g=[...s.iotData,b];g.length>100&&g.splice(0,g.length-100),r.iotData=g;break;case"system_status":case"system_status_update":console.log("📊 更新系统状态:",t.data),r.systemStatus=t.data;break;case"system_metrics":case"system_metrics_update":console.log("📈 更新系统指标:",t.data);const y={...t.data,cpu_percent:t.data.cpu_usage||t.data.cpu_percent||0,memory_percent:t.data.memory_usage||t.data.memory_percent||0,disk_percent:t.data.disk_usage||t.data.disk_percent||0,timestamp:new Date};r.systemMetrics=y;const _=[...s.systemMetricsHistory,y];_.length>50&&_.splice(0,_.length-50),r.systemMetricsHistory=_,r.systemStatus?r.systemStatus={...r.systemStatus,...y}:r.systemStatus=y;break;case"rule_event":if(t.data&&typeof t.data=="object"){const p=t.data;if(p.subject&&p.subject.includes("alert")){const d=[...s.alerts,{id:Date.now(),timestamp:new Date().toISOString(),...p.data}];d.length>50&&d.splice(0,d.length-50),r.alerts=d}}break;case"alert_created":if(t.data&&typeof t.data=="object"){const p=t.data;console.log("📢 收到新告警:",p.alert);const d=[...s.alerts,{id:p.alert_id,timestamp:p.timestamp,type:"alert_created",data:p.alert}];d.length>50&&d.splice(0,d.length-50),r.alerts=d}break;case"alert_resolved":if(t.data&&typeof t.data=="object"){const p=t.data;console.log("✅ 告警已解决:",p.alert_id);const d=[...s.alerts,{id:p.alert_id,timestamp:p.timestamp,type:"alert_resolved",data:p}];d.length>50&&d.splice(0,d.length-50),r.alerts=d}break;case"system_event":console.log("系统事件:",t.data);break;default:console.log("未处理的消息类型:",t.type);break}return r}))},[]),w=l.useCallback(()=>{if(!c.current)return;const t=i();C(s=>({...s,connectionState:t.getConnectionState(),reconnectInfo:t.getReconnectInfo(),lastDisconnectReason:t.getLastDisconnectReason(),connectionInfo:t.getConnectionInfo()}))},[i]);l.useEffect(()=>{i().setCallbacks({onConnect:()=>{console.log("🔗 WebSocket 全局连接回调"),c.current&&(a(!0),w())},onDisconnect:()=>{console.log("🔌 WebSocket 全局断开回调"),c.current&&(a(!1),w())},onMessage:s=>{if(!c.current)return;const r=Date.now();r-S.current<100||(S.current=r,v(s))},onError:s=>{console.error("🚨 WebSocket 全局错误回调:",s),c.current&&(a(!1),w())}})},[i,v,w]),l.useEffect(()=>{const t=i();w();const s=t.isConnected();a(s);const r=()=>{const g=U.getToken();g?(console.log("🔑 设置 WebSocket 认证令牌"),t.setToken(g),t.isConnected()?(console.log("✅ WebSocket已连接，无需重新连接"),a(!0)):(console.log("📡 WebSocket未连接，尝试建立连接..."),t.connect().catch(y=>{console.error("❌ WebSocket 连接失败:",y)}))):console.warn("⚠️ 没有找到认证令牌，无法建立 WebSocket 连接")};r();const u=setInterval(()=>{U.getToken()&&!t.isConnected()&&(console.log("🔄 检测到认证令牌已可用，尝试重新连接WebSocket"),r())},2e3),b=setInterval(()=>{if(c.current){w();const g=t.isConnected();a(g)}},3e3);return()=>{clearInterval(b),clearInterval(u)}},[i,w]);const f=l.useCallback(()=>{console.log("🔄 手动重连 WebSocket");const t=i();if(t.isConnected()){console.log("✅ WebSocket 已连接，无需重连");return}t.resetReconnectAttempts(),t.connect().catch(s=>{console.error("❌ 手动重连失败:",s)})},[i]),$=l.useCallback(()=>{console.log("🔌 手动断开 WebSocket"),i().disconnect()},[i]),I=l.useCallback((t,s)=>{i().send(t,s)},[i]);return l.useEffect(()=>()=>{k.current&&clearTimeout(k.current)},[]),{data:h,isConnected:n,reconnect:f,disconnect:$,sendMessage:I,connectionState:h.connectionState,reconnectInfo:h.reconnectInfo,lastDisconnectReason:h.lastDisconnectReason,connectionInfo:h.connectionInfo}};export{N as a,j as u};
