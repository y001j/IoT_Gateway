name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '18'

jobs:
  # Go后端测试
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      nats:
        image: nats:2.10-alpine
        ports:
          - 4222:4222
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files need formatting:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      env:
        NATS_URL: nats://localhost:4222
        REDIS_URL: redis://localhost:6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: backend
        name: backend-coverage

  # 前端测试
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web/frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run lint
      run: npm run lint

    - name: Run type check
      run: npx tsc --noEmit --skipLibCheck

    - name: Run tests
      run: npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: web/frontend/dist/

  # 构建和发布Docker镜像
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          iot-gateway
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'release' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  # 性能基准测试
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -count=3 ./internal/rules/... > benchmark.txt
        go test -bench=. -benchmem -count=3 ./internal/plugin/... >> benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.txt

  # 发布GitHub Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: web/frontend/dist/

    - name: Build binaries
      run: |
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o iot-gateway-linux-amd64 cmd/gateway/main.go
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o iot-gateway-linux-arm64 cmd/gateway/main.go
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o iot-gateway-windows-amd64.exe cmd/gateway/main.go
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o iot-gateway-darwin-amd64 cmd/gateway/main.go
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o iot-gateway-darwin-arm64 cmd/gateway/main.go

    - name: Create checksums
      run: |
        sha256sum iot-gateway-* > checksums.txt

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          iot-gateway-*
          checksums.txt
        body: |
          ## 🚀 IoT Gateway Release ${{ github.ref_name }}
          
          ### 📦 Assets
          - `iot-gateway-linux-amd64`: Linux x64
          - `iot-gateway-linux-arm64`: Linux ARM64
          - `iot-gateway-windows-amd64.exe`: Windows x64
          - `iot-gateway-darwin-amd64`: macOS Intel
          - `iot-gateway-darwin-arm64`: macOS Apple Silicon
          
          ### 🔒 Verification
          ```bash
          sha256sum -c checksums.txt
          ```
          
          See [CHANGELOG.md](CHANGELOG.md) for details.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}